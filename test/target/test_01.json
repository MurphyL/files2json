{
    "files": {
        "/usr/murph/node_modules": [
            "/usr/murph/node_modules/@iarna/toml/CHANGELOG.md",
            "/usr/murph/node_modules/@iarna/toml/README.md",
            "/usr/murph/node_modules/arg/LICENSE.md",
            "/usr/murph/node_modules/arg/README.md",
            "/usr/murph/node_modules/argparse/CHANGELOG.md",
            "/usr/murph/node_modules/argparse/README.md",
            "/usr/murph/node_modules/balanced-match/LICENSE.md",
            "/usr/murph/node_modules/balanced-match/README.md",
            "/usr/murph/node_modules/brace-expansion/README.md",
            "/usr/murph/node_modules/esprima/README.md",
            "/usr/murph/node_modules/extend-shallow/README.md",
            "/usr/murph/node_modules/gray-matter/CHANGELOG.md",
            "/usr/murph/node_modules/gray-matter/README.md",
            "/usr/murph/node_modules/is-extendable/README.md",
            "/usr/murph/node_modules/js-yaml/CHANGELOG.md",
            "/usr/murph/node_modules/js-yaml/README.md",
            "/usr/murph/node_modules/kind-of/CHANGELOG.md",
            "/usr/murph/node_modules/kind-of/README.md",
            "/usr/murph/node_modules/minimatch/README.md",
            "/usr/murph/node_modules/recursive-readdir/CHANGELOG.md",
            "/usr/murph/node_modules/recursive-readdir/README.md",
            "/usr/murph/node_modules/recursive-readdir-sync/README.md",
            "/usr/murph/node_modules/rw/README.md",
            "/usr/murph/node_modules/section-matter/README.md",
            "/usr/murph/node_modules/sprintf-js/README.md",
            "/usr/murph/node_modules/strip-bom-string/README.md"
        ],
        "/usr/murph/test/source": [
            "/usr/murph/test/source/a.toml",
            "/usr/murph/test/source/markdown/b.md"
        ]
    },
    "items": [
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/@iarna/toml/CHANGELOG.md",
            "content": "# 2.2.5\n\n* Docs: Updated benchmark results. Add fast-toml to result list. Improved benchmark layout.\n* Update @sgarciac/bombadil and @ltd/j-toml in benchmarks and compliance tests.\n* Dev: Some dev dep updates that shouldn't have any impact.\n\n# 2.2.4\n\t\n* Bug fix: Plain date literals (not datetime) immediately followed by another statement (no whitespace or blank line) would crash. Fixes [#19](https://github.com/iarna/iarna-toml/issues/19) and [#23](https://github.com/iarna/iarna-toml/issues/23), thank you [@arnau](https://github.com/arnau) and [@jschaf](https://github.com/jschaf) for reporting this!\n* Bug fix: Hex literals with lowercase Es would throw errors. (Thank you [@DaeCatt](https://github.com/DaeCatt) for this fix!) Fixed [#20](https://github.com/iarna/iarna-toml/issues/20)\n* Some minor doc tweaks\n* Added Node 12 and 13 to Travis. (Node 6 is failing there now, mysteriously. It works on my machineâ„¢, shipping anyway. ðŸ™ƒ)\n\n# 2.2.3\n\nThis release just updates the spec compliance tests and benchmark data to\nbetter represent @ltd/j-toml.\n\n# 2.2.2\n\n## Fixes\n\n* Support parsing and stringifying objects with `__proto__` properties. ([@LongTengDao](https://github.com/LongTengDao))\n\n## Misc\n\n* Updates for spec compliance and benchmarking:\n  * @sgarciac/bombadil -> 2.1.0\n  * toml -> 3.0.0\n* Added spec compliance and benchmarking for:\n  * @ltd/j-toml\n\n# 2.2.1\n\n## Fixes\n\n* Fix bug where keys with names matching javascript Object methods would\n  error.  Thanks [@LongTengDao](https://github.com/LongTengDao) for finding this!\n* Fix bug where a bundled version would fail if `util.inspect` wasn't\n  provided.  This was supposed to be guarded against, but there was a bug in\n  the guard. Thanks [@agriffis](https://github.com/agriffis) for finding and fixing this!\n\n## Misc\n\n* Update the version of bombadil for spec compliance and benchmarking purposes to 2.0.0\n\n## Did you know?\n\nNode 6 and 8 are measurably slower than Node 6, 10 and 11, at least when it comes to parsing TOML!\n\n![](https://pbs.twimg.com/media/DtDeVjmU4AE5apz.jpg)\n\n# 2.2.0\n\n## Features\n\n* Typescript: Lots of improvements to our type definitions, many many to\n  [@jorgegonzalez](https://github.com/jorgegonzalez) and [@momocow](https://github.com/momocow) for working through these.\n\n## Fixes\n\n* Very large integers (>52bit) are stored as BigInts on runtimes that\n  support them.  BigInts are 128bits, but the TOML spec limits its integers\n  to 64bits.  We now limit our integers to 64bits\n  as well.\n* Fix a bug in stringify where control characters were being emitted as unicode chars and not escape sequences.\n\n## Misc\n\n* Moved our spec tests out to an external repo\n* Improved the styling of the spec compliance comparison\n\n# 2.1.1\n\n## Fixes\n\n* Oops, type defs didn't end up in the tarball, ty [@jorgegonzalez](https://github.com/jorgegonzalez)â€¼\n\n# 2.1.0\n\n## Features\n\n* Types for typescript support, thank you [@momocow](https://github.com/momocow)!\n\n## Fixes\n\n* stringify: always strip invalid dates.  This fixes a bug where an\n  invalid date in an inline array would not be removed and would instead\n  result in an error.\n* stringify: if an invalid type is found make sure it's thrown as an\n  error object.  Previously the type name was, unhelpfully, being thrown.\n* stringify: Multiline strings ending in a quote would generate invalid TOML.\n* parse: Error if a signed integer has a leading zero, eg, `-01` or `+01`.\n* parse: Error if \\_ appears at the end of the integer part of a float, eg `1_.0`. \\_ is only valid between _digits_.\n\n## Fun\n\n* BurntSushi's comprehensive TOML 0.4.0 test suite is now used in addition to our existing test suite.\n* You can see exactly how the other JS TOML libraries stack up in testing\n  against both BurntSushi's tests and my own in the new\n  [TOML-SPEC-SUPPORT](TOML-SPEC-SUPPORT.md) doc.\n\n# 2.0.0\n\nWith 2.0.0, @iarna/toml supports the TOML v0.5.0 specification.  TOML 0.5.0\nbrings some changes:\n\n* Delete characters (U+007F) are not allowed in plain strings. You can include them with\n  escaped unicode characters, eg `\\u007f`.\n* Integers are specified as being 64bit unsigned values.  These are\n  supported using `BigInt`s if you are using Node 10 or later.\n* Keys may be literal strings, that is, you can use single quoted strings to\n  quote key names, so the following is now valid:\n    'a\"b\"c' = 123\n* The floating point values `nan`, `inf` and `-inf` are supported. The stringifier will no \n  longer strip NaN, Infinity and -Infinity, instead serializing them as these new values..\n* Datetimes can separate the date and time with a space instead of a T, so\n  `2017-12-01T00:00:00Z` can be written as `2017-12-01 00:00:00Z`.\n* Datetimes can be floating, that is, they can be represented without a timezone.\n  These are represented in javascript as Date objects whose `isFloating` property is true and\n  whose `toISOString` method will return a representation without a timezone.\n* Dates without times are now supported. Dates do not have timezones. Dates\n  are represented in javascript as a Date object whose `isDate` property is true and\n  whose `toISOString` method returns just the date.\n* Times without dates are now supported. Times do not have timezones. Times\n  are represented in javascript as a Date object whose `isTime` property is true and\n  whose `toISOString` method returns just the time.\n* Keys can now include dots to directly address deeper structures, so `a.b = 23` is\n  the equivalent of `a = {b = 23}` or ```[a]\nb = 23```. These can be used both as keys to regular tables and inline tables.\n* Integers can now be specified in binary, octal and hexadecimal by prefixing the \n  number with `0b`, `0o` and `0x` respectively.  It is now illegal to left\n  pad a decimal value with zeros.\n\nSome parser details were also fixed:\n\n* Negative zero (`-0.0`) and positive zero (`0.0`) are distinct floating point values.\n* Negative integer zero (`-0`) is not distinguished from positive zero (`0`).\n\n# 1.7.1\n\nAnother 18% speed boost on our overall benchmarks!  This time it came from\nswitching from string comparisons to integer by converting each character to\nits respective code point.  This also necessitated rewriting the boolean\nparser to actually parse character-by-character as it should.  End-of-stream\nis now marked with a numeric value outside of the Unicode range, rather than\na Symbol, meaning that the parser's char property is now monomorphic.\n\nBug fix, previously, `'abc''def'''`  was accepted (as the value: `abcdef`).\nNow it will correctly raise an error.\n\nSpec tests now run against bombadil as well (it fails some, which is unsurprising\ngiven its incomplete state).\n\n# 1.7.0\n\nThis release features an overall 15% speed boost on our benchmarks.  This\ncame from a few things:\n\n* Date parsing was rewritten to not use regexps, resulting in a huge speed increase.\n* Strings of all kinds and bare keywords now use tight loops to collect characters when this will help.\n* Regexps in general were mostly removed.  This didn't result in a speed\n  change, but it did allow refactoring the parser to be a lot easier to\n  follow.\n* The internal state tracking now uses a class and is constructed with a\n  fixed set of properties, allowing v8's optimizer to be more effective.\n\nIn the land of new features:\n\n* Errors in the syntax of your TOML will now have the `fromTOML` property\n  set to true.  This is in addition to the `line`, `col` and `pos`\n  properties they already have.\n\n  The main use of this is to make it possible to distinguish between errors\n  in the TOML and errors in the parser code itself. This is of particular utility\n  when testing parse errors.\n\n# 1.6.0\n\n**FIXES**\n\n* TOML.stringify: Allow toJSON properties that aren't functions, to align with JSON.stringify's behavior.\n* TOML.stringify: Don't use ever render keys as literal strings.\n* TOML.stringify: Don't try to escape control characters in literal strings.\n\n**FEATURES**\n\n* New Export: TOML.stringify.value, for encoding a stand alone inline value as TOML would. This produces\n  a TOML fragment, not a complete valid document.\n\n# 1.5.6\n\n* String literals are NOT supported as key names.\n* Accessing a shallower table after accessing it more deeply is ok and no longer crashes, eg:\n  ```toml\n  [a.b]\n  [a]\n  ```\n* Unicode characters in the reserved range now crash.\n* Empty bare keys, eg `[.abc]` or `[]` now crash.\n* Multiline backslash trimming supports CRs.\n* Multiline post quote trimming supports CRs.\n* Strings may not contain bare control chars (0x00-0x1f), except for \\n, \\r and \\t.\n\n# 1.5.5\n\n* Yet MORE README fixes. ðŸ™ƒ\n\n# 1.5.4\n\n* README fix\n\n# 1.5.3\n\n* Benchmarks!\n* More tests!\n* More complete LICENSE information (some dev files are from other, MIT\n  licensed, projects, this is now more explicitly documented.)\n\n# 1.5.2\n\n* parse: Arrays with mixed types now throw errors, per the spec.\n* parse: Fix a parser bug that would result in errors when trying to parse arrays of numbers or dates\n  that were not separated by a space from the closing ].\n* parse: Fix a bug in the error pretty printer that resulted in errors on\n  the first line not getting the pretty print treatment.\n* stringify: Fix long standing bug where an array of Numbers, some of which required\n  decimals, would be emitted in a way that parsers would treat as mixed\n  Integer and Float values.  Now if any Numbers in an array must be\n  represented with a decimal then all will be emitted such that parsers will\n  understand them to be Float.\n\n# 1.5.1\n\n* README fix\n\n# 1.5.0\n\n* A brand new TOML parser, from scratch, that performs like `toml-j0.4`\n  without the crashes and with vastly better error messages.\n* 100% test coverage for both the new parser and the existing stringifier. Some subtle bugs squashed!\n\n# v1.4.2\n\n* Revert fallback due to its having issues with the same files.  (New plan\n  will be to write my own.)\n\n# v1.4.1\n\n* Depend on both `toml` and `toml-j0.4` with fallback from the latter to the\n  former when the latter crashes.\n\n# v1.4.0\n\n* Ducktype dates to make them compatible with `moment` and other `Date` replacements.\n\n# v1.3.1\n\n* Update docs with new toml module.\n\n# v1.3.0\n\n* Switch from `toml` to `toml-j0.4`, which is between 20x and 200x faster.\n  (The larger the input, the faster it is compared to `toml`).\n\n# v1.2.0\n\n* Return null when passed in null as the top level object.\n* Detect and skip invalid dates and numbers\n\n# v1.1.0\n\n* toJSON transformations are now honored (for everything except Date objects, as JSON represents them as strings).\n* Undefined/null values no longer result in exceptions, they now just result in the associated key being elided.\n\n# v1.0.1\n\n* Initial release"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/@iarna/toml/README.md",
            "content": "# @iarna/toml\n\nBetter TOML parsing and stringifying all in that familiar JSON interface.\n\n[![Coverage Status](https://coveralls.io/repos/github/iarna/iarna-toml/badge.svg)](https://coveralls.io/github/iarna/iarna-toml)\n\n# ** TOML 0.5.0 **\n\n### TOML Spec Support\n\nThe most recent version as of 2018-07-26: [v0.5.0](https://github.com/mojombo/toml/blob/master/versions/en/toml-v0.5.0.md)\n\n### Example\n\n```js\nconst TOML = require('@iarna/toml')\nconst obj = TOML.parse(`[abc]\nfoo = 123\nbar = [1,2,3]`)\n/* obj =\n{abc: {foo: 123, bar: [1,2,3]}}\n*/\nconst str = TOML.stringify(obj)\n/* str =\n[abc]\nfoo = 123\nbar = [ 1, 2, 3 ]\n*/\n```\n\nVisit the project github [for more examples](https://github.com/iarna/iarna-toml/tree/latest/examples)!\n\n\n## Why @iarna/toml\n\n* See [TOML-SPEC-SUPPORT](https://shared.by.re-becca.org/misc/TOML-SPEC-SUPPORT.html)\n  for a comparison of which TOML features are supported by the various\n  Node.js TOML parsers.\n* BigInt support on Node 10!\n* 100% test coverage.\n* Fast parsing. It's as much as 100 times\n  faster than `toml` and 3 times faster than `toml-j0.4`.  However a recent\n  newcomer [`@ltd/j-toml`](https://www.npmjs.com/package/@ltd/j-toml) has\n  appeared with 0.5 support and astoundingly fast parsing speeds for large\n  text blocks. All I can say is you'll have to test your specific work loads\n  if you want to know which of @iarna/toml and @ltd/j-toml is faster for\n  you, as we currently excell in different areas.\n* Careful adherence to spec. Tests go beyond simple coverage.\n* Smallest parser bundle (if you use `@iarna/toml/parse-string`).\n* No deps.\n* Detailed and easy to read error messagesâ€¼\n\n```console\n> TOML.parse(src)\nError: Unexpected character, expecting string, number, datetime, boolean, inline array or inline table at row 6, col 5, pos 87:\n5: \"abc\\\"\" = { abc=123,def=\"abc\" }\n6> foo=sdkfj\n       ^\n7:\n```\n\n## TOML.parse(str) â†’ Object [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse.js)\n\nAlso available with: `require('@iarna/toml/parse-string')`\n\nSynchronously parse a TOML string and return an object.\n\n\n## TOML.stringify(obj) â†’ String [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/stringify.js)\n\nAlso available with: `require('@iarna/toml/stringify)`\n\nSerialize an object as TOML.\n\n## [your-object].toJSON\n\nIf an object `TOML.stringify` is serializing has a `toJSON` method then it\nwill call it to transform the object before serializing it.  This matches\nthe behavior of `JSON.stringify`.\n\nThe one exception to this is that `toJSON` is not called for `Date` objects\nbecause `JSON` represents dates as strings and TOML can represent them natively.\n\n[`moment`](https://www.npmjs.com/package/moment) objects are treated the\nsame as native `Date` objects, in this respect.\n\n## TOML.stringify.value(obj) -> String\n\nAlso available with: `require('@iarna/toml/stringify').value`\n\nSerialize a value as TOML would.  This is a fragment and not a complete\nvalid TOML document.\n\n## Promises and Streaming\n\nThe parser provides alternative async and streaming interfaces, for times\nthat you're working with really absurdly big TOML files and don't want to\ntie-up the event loop while it parses.\n\n### TOML.parse.async(str[, opts]) â†’ Promise(Object) [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-async.js)\n\nAlso available with: `require('@iarna/toml/parse-async')`\n\n`opts.blocksize` is the amount text to parser per pass through the event loop. Defaults to 40kb.\n\nAsynchronously parse a TOML string and return a promise of the resulting object.\n\n### TOML.parse.stream(readable) â†’ Promise(Object) [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-stream-readable.js)\n\nAlso available with: `require('@iarna/toml/parse-stream')`\n\nGiven a readable stream, parse it as it feeds us data. Return a promise of the resulting object.\n\n### readable.pipe(TOML.parse.stream()) â†’ Transform [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-stream-through.js)\n\nAlso available with: `require('@iarna/toml/parse-stream')`\n\nReturns a transform stream in object mode.  When it completes, emit the\nresulting object. Only one object will ever be emitted.\n\n## Lowlevel Interface [(example)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-lowlevel.js) [(example w/ parser debugging)](https://github.com/iarna/iarna-toml/blob/latest/examples/parse-lowlevel-debug.js)\n\nYou construct a parser object, per TOML file you want to process:\n\n```js\nconst TOMLParser = require('@iarna/toml/lib/toml-parser.js')\nconst parser = new TOMLParser()\n```\n\nThen you call the `parse` method for each chunk as you read them, or in a\nsingle call:\n\n```js\nparser.parse(`hello = 'world'`)\n```\n\nAnd finally, you call the `finish` method to complete parsing and retrieve\nthe resulting object.\n\n```js\nconst data = parser.finish()\n```\n\nBoth the `parse` method and `finish` method will throw if they find a\nproblem with the string they were given.  Error objects thrown from the\nparser have `pos`, `line` and `col` attributes.  `TOML.parse` adds a visual\nsummary of where in the source string there were issues using\n`parse-pretty-error` and you can too:\n\n```js\nconst prettyError = require('./parse-pretty-error.js')\nconst newErr = prettyError(err, sourceString)\n```\n\n## What's Different\n\nVersion 2 of this module supports TOML 0.5.0.  Other modules currently\npublished to the npm registry support 0.4.0.  0.5.0 is mostly backwards\ncompatible with 0.4.0, but if you have need, you can install @iarna/toml@1\nto get a version of this module that supports 0.4.0.  Please see the\n[CHANGELOG](CHANGELOG.md#2.0.0) for details on exactly whats changed.\n\n## TOML we can't do\n\n* `-nan` is a valid TOML value and is converted into `NaN`. There is no way to\n  produce `-nan` when stringifying. Stringification will produce positive `nan`.\n* Detecting and erroring on invalid utf8 documents: This is because Node's\n  UTF8 processing converts invalid sequences into the placeholder character\n  and does not have facilities for reporting these as errors instead.  We\n  _can_ detect the placeholder character, but it's valid to intentionally\n  include them in documents, so erroring on them is not great.\n* On versions of Node < 10, very large Integer values will lose precision.\n  On Node >=10, bigints are used.\n* Floating/local dates and times are still represented by JavaScript Date\n  objects, which don't actually support these concepts. The objects\n  returned have been modified so that you can determine what kind of thing\n  they are (with `isFloating`, `isDate`, `isTime` properties) and that\n  their ISO representation (via `toISOString`) is representative of their\n  TOML value.  They will correctly round trip if you pass them to\n  `TOML.stringify`.\n* Binary, hexadecimal and octal values are converted to ordinary integers and\n  will be decimal if you stringify them.\n\n## Changes\n\nI write a by hand, honest-to-god,\n[CHANGELOG](https://github.com/iarna/iarna-toml/blob/latest/CHANGELOG.md)\nfor this project.  It's a description of what went into a release that you\nthe consumer of the module could care about, not a list of git commits, so\nplease check it out!\n\n## Benchmarks\n\nYou can run them yourself with:\n\n```console\n$ npm run benchmark\n```\n\nThe results below are from my desktop using Node 13.13.0.  The library\nversions tested were `@iarna/toml@2.2.4`, `toml-j0.4@1.1.1`, `toml@3.0.0`,\n`@sgarciac/bombadil@2.3.0`, `@ltd/j-toml@0.5.107`, and `fast-toml@0.5.4`.  The speed value is\nmegabytes-per-second that the parser can process of that document type.\nBigger is better. The percentage after average results is the margin of error.\n\nNew here is fast-toml. fast-toml is very fast, for some datatypes, but it\nalso is missing most error checking demanded by the spec.  For 0.4, it is\ncomplete except for detail of multiline strings caught by the compliance\ntests.  Its support for 0.5 is incomplete.  Check out the\n[spec compliance](https://shared.by.re-becca.org/misc/TOML-SPEC-SUPPORT.html) doc\nfor details.\n\nAs this table is getting a little wide, with how npm and github display it,\nyou can also view it seperately in the\n[BENCHMARK](https://shared.by.re-becca.org/misc/BENCHMARK.html) document.\n\n|   | @iarna/<wbr>toml | toml-j0.4 | toml | @sgarciac/<wbr>bombadil | @ltd/<wbr>j-toml | fast-toml |\n| - | :---------: | :-------: | :--: | :----------------: | :---------: | :-------: |\n| **Overall** | 28MB/sec<br><small>0.35%</small> | 6.5MB/sec<br><small>0.25%</small> | 0.2MB/sec<br><small>0.70%</small> | - | 35MB/sec<br><small>0.23%</small> | - |\n| **Spec Example: v0.4.0** | 26MB/sec<br><small>0.37%</small> | 10MB/sec<br><small>0.27%</small> | 1MB/sec<br><small>0.42%</small> | 1.2MB/sec<br><small>0.95%</small> | 28MB/sec<br><small>0.31%</small> | - |\n| **Spec Example: Hard Unicode** | 64MB/sec<br><small>0.59%</small> | 18MB/sec<br><small>0.12%</small> | 2MB/sec<br><small>0.20%</small> | 0.6MB/sec<br><small>0.53%</small> | 68MB/sec<br><small>0.31%</small> | 78MB/sec<br><small>0.28%</small> |\n| **Types: Array, Inline** | 7.3MB/sec<br><small>0.60%</small> | 4MB/sec<br><small>0.16%</small> | 0.1MB/sec<br><small>0.91%</small> | 1.3MB/sec<br><small>0.81%</small> | 10MB/sec<br><small>0.35%</small> | 9MB/sec<br><small>0.16%</small> |\n| **Types: Array** | 6.8MB/sec<br><small>0.19%</small> | 6.7MB/sec<br><small>0.15%</small> | 0.2MB/sec<br><small>0.79%</small> | 1.2MB/sec<br><small>0.93%</small> | 8.8MB/sec<br><small>0.47%</small> | 27MB/sec<br><small>0.21%</small> |\n| **Types: Boolean,** | 21MB/sec<br><small>0.20%</small> | 9.4MB/sec<br><small>0.17%</small> | 0.2MB/sec<br><small>0.96%</small> | 1.8MB/sec<br><small>0.70%</small> | 16MB/sec<br><small>0.20%</small> | 8.4MB/sec<br><small>0.22%</small> |\n| **Types: Datetime** | 18MB/sec<br><small>0.14%</small> | 11MB/sec<br><small>0.15%</small> | 0.3MB/sec<br><small>0.85%</small> | 1.6MB/sec<br><small>0.45%</small> | 9.8MB/sec<br><small>0.48%</small> | 6.5MB/sec<br><small>0.23%</small> |\n| **Types: Float** | 8.8MB/sec<br><small>0.09%</small> | 5.9MB/sec<br><small>0.14%</small> | 0.2MB/sec<br><small>0.51%</small> | 2.1MB/sec<br><small>0.82%</small> | 14MB/sec<br><small>0.15%</small> | 7.9MB/sec<br><small>0.14%</small> |\n| **Types: Int** | 5.9MB/sec<br><small>0.11%</small> | 4.5MB/sec<br><small>0.28%</small> | 0.1MB/sec<br><small>0.78%</small> | 1.5MB/sec<br><small>0.64%</small> | 10MB/sec<br><small>0.14%</small> | 8MB/sec<br><small>0.17%</small> |\n| **Types: Literal String, 7 char** | 26MB/sec<br><small>0.29%</small> | 8.5MB/sec<br><small>0.32%</small> | 0.3MB/sec<br><small>0.84%</small> | 2.3MB/sec<br><small>1.02%</small> | 23MB/sec<br><small>0.15%</small> | 13MB/sec<br><small>0.15%</small> |\n| **Types: Literal String, 92 char** | 46MB/sec<br><small>0.19%</small> | 11MB/sec<br><small>0.20%</small> | 0.3MB/sec<br><small>0.56%</small> | 12MB/sec<br><small>0.92%</small> | 101MB/sec<br><small>0.17%</small> | 75MB/sec<br><small>0.29%</small> |\n| **Types: Literal String, Multiline, 1079 char** | 22MB/sec<br><small>0.42%</small> | 6.7MB/sec<br><small>0.55%</small> | 0.9MB/sec<br><small>0.78%</small> | 44MB/sec<br><small>1.00%</small> | 350MB/sec<br><small>0.16%</small> | 636MB/sec<br><small>0.16%</small> |\n| **Types: Basic String, 7 char** | 25MB/sec<br><small>0.15%</small> | 7.3MB/sec<br><small>0.18%</small> | 0.2MB/sec<br><small>0.96%</small> | 2.2MB/sec<br><small>1.09%</small> | 14MB/sec<br><small>0.16%</small> | 12MB/sec<br><small>0.22%</small> |\n| **Types: Basic String, 92 char** | 43MB/sec<br><small>0.30%</small> | 7.2MB/sec<br><small>0.16%</small> | 0.1MB/sec<br><small>4.04%</small> | 12MB/sec<br><small>1.33%</small> | 71MB/sec<br><small>0.19%</small> | 70MB/sec<br><small>0.23%</small> |\n| **Types: Basic String, 1079 char** | 24MB/sec<br><small>0.45%</small> | 5.8MB/sec<br><small>0.17%</small> | 0.1MB/sec<br><small>3.64%</small> | 44MB/sec<br><small>1.05%</small> | 93MB/sec<br><small>0.29%</small> | 635MB/sec<br><small>0.28%</small> |\n| **Types: Table, Inline** | 9.7MB/sec<br><small>0.10%</small> | 5.5MB/sec<br><small>0.22%</small> | 0.1MB/sec<br><small>0.87%</small> | 1.4MB/sec<br><small>1.18%</small> | 8.7MB/sec<br><small>0.60%</small> | 8.7MB/sec<br><small>0.22%</small> |\n| **Types: Table** | 7.1MB/sec<br><small>0.14%</small> | 5.6MB/sec<br><small>0.42%</small> | 0.1MB/sec<br><small>0.65%</small> | 1.4MB/sec<br><small>1.11%</small> | 7.4MB/sec<br><small>0.70%</small> | 18MB/sec<br><small>0.20%</small> |\n| **Scaling: Array, Inline, 1000 elements** | 40MB/sec<br><small>0.21%</small> | 2.4MB/sec<br><small>0.19%</small> | 0.1MB/sec<br><small>0.35%</small> | 1.6MB/sec<br><small>1.02%</small> | 17MB/sec<br><small>0.15%</small> | 32MB/sec<br><small>0.16%</small> |\n| **Scaling: Array, Nested, 1000 deep** | 2MB/sec<br><small>0.15%</small> | 1.7MB/sec<br><small>0.26%</small> | 0.3MB/sec<br><small>0.58%</small> | - | 1.8MB/sec<br><small>0.74%</small> | 13MB/sec<br><small>0.20%</small> |\n| **Scaling: Literal String, 40kb** | 61MB/sec<br><small>0.18%</small> | 10MB/sec<br><small>0.15%</small> | 3MB/sec<br><small>0.84%</small> | 12MB/sec<br><small>0.51%</small> | 551MB/sec<br><small>0.44%</small> | 19kMB/sec<br><small>0.19%</small> |\n| **Scaling: Literal String, Multiline, 40kb** | 62MB/sec<br><small>0.16%</small> | 5MB/sec<br><small>0.45%</small> | 0.2MB/sec<br><small>1.70%</small> | 11MB/sec<br><small>0.74%</small> | 291MB/sec<br><small>0.24%</small> | 21kMB/sec<br><small>0.22%</small> |\n| **Scaling: Basic String, Multiline, 40kb** | 62MB/sec<br><small>0.18%</small> | 5.8MB/sec<br><small>0.38%</small> | 2.9MB/sec<br><small>0.86%</small> | 11MB/sec<br><small>0.41%</small> | 949MB/sec<br><small>0.44%</small> | 26kMB/sec<br><small>0.16%</small> |\n| **Scaling: Basic String, 40kb** | 59MB/sec<br><small>0.20%</small> | 6.3MB/sec<br><small>0.17%</small> | 0.2MB/sec<br><small>1.95%</small> | 12MB/sec<br><small>0.44%</small> | 508MB/sec<br><small>0.35%</small> | 18kMB/sec<br><small>0.15%</small> |\n| **Scaling: Table, Inline, 1000 elements** | 28MB/sec<br><small>0.12%</small> | 8.2MB/sec<br><small>0.19%</small> | 0.3MB/sec<br><small>0.89%</small> | 2.3MB/sec<br><small>1.14%</small> | 5.3MB/sec<br><small>0.24%</small> | 13MB/sec<br><small>0.20%</small> |\n| **Scaling: Table, Inline, Nested, 1000 deep** | 7.8MB/sec<br><small>0.28%</small> | 5MB/sec<br><small>0.20%</small> | 0.1MB/sec<br><small>0.84%</small> | - | 3.2MB/sec<br><small>0.52%</small> | 10MB/sec<br><small>0.23%</small> |\n\n## Tests\n\nThe test suite is maintained at 100% coverage: [![Coverage Status](https://coveralls.io/repos/github/iarna/iarna-toml/badge.svg)](https://coveralls.io/github/iarna/iarna-toml)\n\nThe spec was carefully hand converted into a series of test framework\nindependent (and mostly language independent) assertions, as pairs of TOML\nand YAML files.  You can find those files here:\n[spec-test](https://github.com/iarna/iarna-toml/blob/latest/test/spec-test/). \nA number of examples of invalid Unicode were also written, but are difficult\nto make use of in Node.js where Unicode errors are silently hidden.  You can\nfind those here: [spec-test-disabled](https://github.com/iarna/iarna-toml/blob/latest/test/spec-test-disabled/).\n\nFurther tests were written to increase coverage to 100%, these may be more\nimplementation specific, but they can be found in [coverage](https://github.com/iarna/iarna-toml/blob/latest/test/coverage.js) and\n[coverage-error](https://github.com/iarna/iarna-toml/blob/latest/test/coverage-error.js).\n\nI've also written some quality assurance style tests, which don't contribute\nto coverage but do cover scenarios that could easily be problematic for some\nimplementations can be found in:\n[test/qa.js](https://github.com/iarna/iarna-toml/blob/latest/test/qa.js) and\n[test/qa-error.js](https://github.com/iarna/iarna-toml/blob/latest/test/qa-error.js).\n\nAll of the official example files from the TOML spec are run through this\nparser and compared to the official YAML files when available. These files are from the TOML spec as of:\n[357a4ba6](https://github.com/toml-lang/toml/tree/357a4ba6782e48ff26e646780bab11c90ed0a7bc)\nand specifically are:\n\n* [github.com/toml-lang/toml/tree/357a4ba6/examples](https://github.com/toml-lang/toml/tree/357a4ba6782e48ff26e646780bab11c90ed0a7bc/examples)\n* [github.com/toml-lang/toml/tree/357a4ba6/tests](https://github.com/toml-lang/toml/tree/357a4ba6782e48ff26e646780bab11c90ed0a7bc/tests)\n\nThe stringifier is tested by round-tripping these same files, asserting that\n`TOML.parse(sourcefile)` deepEqual\n`TOML.parse(TOML.stringify(TOML.parse(sourcefile))`.  This is done in\n[test/roundtrip-examples.js](https://github.com/iarna/iarna-toml/blob/latest/test/round-tripping.js)\nThere are also some tests written to complete coverage from stringification in:\n[test/stringify.js](https://github.com/iarna/iarna-toml/blob/latest/test/stringify.js)\n\nTests for the async and streaming interfaces are in [test/async.js](https://github.com/iarna/iarna-toml/blob/latest/test/async.js) and [test/stream.js](https://github.com/iarna/iarna-toml/blob/latest/test/stream.js) respectively.\n\nTests for the parsers debugging mode live in [test/devel.js](https://github.com/iarna/iarna-toml/blob/latest/test/devel.js).\n\nAnd finally, many more stringification tests were borrowed from [@othiym23](https://github.com/othiym23)'s\n[toml-stream](https://npmjs.com/package/toml-stream) module. They were fetched as of\n[b6f1e26b572d49742d49fa6a6d11524d003441fa](https://github.com/othiym23/toml-stream/tree/b6f1e26b572d49742d49fa6a6d11524d003441fa/test) and live in\n[test/toml-stream](https://github.com/iarna/iarna-toml/blob/latest/test/toml-stream/).\n\n## Improvements to make\n\n* In stringify:\n  * Any way to produce comments.  As a JSON stand-in I'm not too worried\n    about this.  That said, a document orientated fork is something I'd like\n    to look at eventuallyâ€¦\n  * Stringification could use some work on its error reporting.  It reports\n    _what's_ wrong, but not where in your data structure it was.\n* Further optimize the parser:\n  * There are some debugging assertions left in the main parser, these should be moved to a subclass.\n  * Make the whole debugging parser thing work as a mixin instead of as a superclass."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/arg/LICENSE.md",
            "content": "The MIT License (MIT)\n\nCopyright (c) 2021 Vercel, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/arg/README.md",
            "content": "# Arg\n\n`arg` is an unopinionated, no-frills CLI argument parser.\n\n## Installation\n\n```bash\nnpm install arg\n```\n\n## Usage\n\n`arg()` takes either 1 or 2 arguments:\n\n1. Command line specification object (see below)\n2. Parse options (_Optional_, defaults to `{permissive: false, argv: process.argv.slice(2), stopAtPositional: false}`)\n\nIt returns an object with any values present on the command-line (missing options are thus\nmissing from the resulting object). Arg performs no validation/requirement checking - we\nleave that up to the application.\n\nAll parameters that aren't consumed by options (commonly referred to as \"extra\" parameters)\nare added to `result._`, which is _always_ an array (even if no extra parameters are passed,\nin which case an empty array is returned).\n\n```javascript\nconst arg = require('arg');\n\n// `options` is an optional parameter\nconst args = arg(\n\tspec,\n\t(options = { permissive: false, argv: process.argv.slice(2) })\n);\n```\n\nFor example:\n\n```console\n$ node ./hello.js --verbose -vvv --port=1234 -n 'My name' foo bar --tag qux --tag=qix -- --foobar\n```\n\n```javascript\n// hello.js\nconst arg = require('arg');\n\nconst args = arg({\n\t// Types\n\t'--help': Boolean,\n\t'--version': Boolean,\n\t'--verbose': arg.COUNT, // Counts the number of times --verbose is passed\n\t'--port': Number, // --port <number> or --port=<number>\n\t'--name': String, // --name <string> or --name=<string>\n\t'--tag': [String], // --tag <string> or --tag=<string>\n\n\t// Aliases\n\t'-v': '--verbose',\n\t'-n': '--name', // -n <string>; result is stored in --name\n\t'--label': '--name' // --label <string> or --label=<string>;\n\t//     result is stored in --name\n});\n\nconsole.log(args);\n/*\n{\n\t_: [\"foo\", \"bar\", \"--foobar\"],\n\t'--port': 1234,\n\t'--verbose': 4,\n\t'--name': \"My name\",\n\t'--tag': [\"qux\", \"qix\"]\n}\n*/\n```\n\nThe values for each key=&gt;value pair is either a type (function or [function]) or a string (indicating an alias).\n\n- In the case of a function, the string value of the argument's value is passed to it,\n  and the return value is used as the ultimate value.\n\n- In the case of an array, the only element _must_ be a type function. Array types indicate\n  that the argument may be passed multiple times, and as such the resulting value in the returned\n  object is an array with all of the values that were passed using the specified flag.\n\n- In the case of a string, an alias is established. If a flag is passed that matches the _key_,\n  then the _value_ is substituted in its place.\n\nType functions are passed three arguments:\n\n1. The parameter value (always a string)\n2. The parameter name (e.g. `--label`)\n3. The previous value for the destination (useful for reduce-like operations or for supporting `-v` multiple times, etc.)\n\nThis means the built-in `String`, `Number`, and `Boolean` type constructors \"just work\" as type functions.\n\nNote that `Boolean` and `[Boolean]` have special treatment - an option argument is _not_ consumed or passed, but instead `true` is\nreturned. These options are called \"flags\".\n\nFor custom handlers that wish to behave as flags, you may pass the function through `arg.flag()`:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = [\n\t'--foo',\n\t'bar',\n\t'-ff',\n\t'baz',\n\t'--foo',\n\t'--foo',\n\t'qux',\n\t'-fff',\n\t'qix'\n];\n\nfunction myHandler(value, argName, previousValue) {\n\t/* `value` is always `true` */\n\treturn 'na ' + (previousValue || 'batman!');\n}\n\nconst args = arg(\n\t{\n\t\t'--foo': arg.flag(myHandler),\n\t\t'-f': '--foo'\n\t},\n\t{\n\t\targv\n\t}\n);\n\nconsole.log(args);\n/*\n{\n\t_: ['bar', 'baz', 'qux', 'qix'],\n\t'--foo': 'na na na na na na na na batman!'\n}\n*/\n```\n\nAs well, `arg` supplies a helper argument handler called `arg.COUNT`, which equivalent to a `[Boolean]` argument's `.length`\nproperty - effectively counting the number of times the boolean flag, denoted by the key, is passed on the command line..\nFor example, this is how you could implement `ssh`'s multiple levels of verbosity (`-vvvv` being the most verbose).\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['-AAAA', '-BBBB'];\n\nconst args = arg(\n\t{\n\t\t'-A': arg.COUNT,\n\t\t'-B': [Boolean]\n\t},\n\t{\n\t\targv\n\t}\n);\n\nconsole.log(args);\n/*\n{\n\t_: [],\n\t'-A': 4,\n\t'-B': [true, true, true, true]\n}\n*/\n```\n\n### Options\n\nIf a second parameter is specified and is an object, it specifies parsing options to modify the behavior of `arg()`.\n\n#### `argv`\n\nIf you have already sliced or generated a number of raw arguments to be parsed (as opposed to letting `arg`\nslice them from `process.argv`) you may specify them in the `argv` option.\n\nFor example:\n\n```javascript\nconst args = arg(\n\t{\n\t\t'--foo': String\n\t},\n\t{\n\t\targv: ['hello', '--foo', 'world']\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_: ['hello'],\n\t'--foo': 'world'\n};\n```\n\n#### `permissive`\n\nWhen `permissive` set to `true`, `arg` will push any unknown arguments\nonto the \"extra\" argument array (`result._`) instead of throwing an error about\nan unknown flag.\n\nFor example:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = [\n\t'--foo',\n\t'hello',\n\t'--qux',\n\t'qix',\n\t'--bar',\n\t'12345',\n\t'hello again'\n];\n\nconst args = arg(\n\t{\n\t\t'--foo': String,\n\t\t'--bar': Number\n\t},\n\t{\n\t\targv,\n\t\tpermissive: true\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_: ['--qux', 'qix', 'hello again'],\n\t'--foo': 'hello',\n\t'--bar': 12345\n};\n```\n\n#### `stopAtPositional`\n\nWhen `stopAtPositional` is set to `true`, `arg` will halt parsing at the first\npositional argument.\n\nFor example:\n\n```javascript\nconst arg = require('arg');\n\nconst argv = ['--foo', 'hello', '--bar'];\n\nconst args = arg(\n\t{\n\t\t'--foo': Boolean,\n\t\t'--bar': Boolean\n\t},\n\t{\n\t\targv,\n\t\tstopAtPositional: true\n\t}\n);\n```\n\nresults in:\n\n```javascript\nconst args = {\n\t_: ['hello', '--bar'],\n\t'--foo': true\n};\n```\n\n### Errors\n\nSome errors that `arg` throws provide a `.code` property in order to aid in recovering from user error, or to\ndifferentiate between user error and developer error (bug).\n\n##### ARG_UNKNOWN_OPTION\n\nIf an unknown option (not defined in the spec object) is passed, an error with code `ARG_UNKNOWN_OPTION` will be thrown:\n\n```js\n// cli.js\ntry {\n\trequire('arg')({ '--hi': String });\n} catch (err) {\n\tif (err.code === 'ARG_UNKNOWN_OPTION') {\n\t\tconsole.log(err.message);\n\t} else {\n\t\tthrow err;\n\t}\n}\n```\n\n```shell\nnode cli.js --extraneous true\nUnknown or unexpected option: --extraneous\n```\n\n# FAQ\n\nA few questions and answers that have been asked before:\n\n### How do I require an argument with `arg`?\n\nDo the assertion yourself, such as:\n\n```javascript\nconst args = arg({ '--name': String });\n\nif (!args['--name']) throw new Error('missing required argument: --name');\n```\n\n# License\n\nReleased under the [MIT License](LICENSE.md)."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/argparse/CHANGELOG.md",
            "content": "1.0.10 / 2018-02-15\n------------------\n\n- Use .concat instead of + for arrays, #122.\n\n\n1.0.9 / 2016-09-29\n------------------\n\n- Rerelease after 1.0.8 - deps cleanup.\n\n\n1.0.8 / 2016-09-29\n------------------\n\n- Maintenance (deps bump, fix node 6.5+ tests, coverage report).\n\n\n1.0.7 / 2016-03-17\n------------------\n\n- Teach `addArgument` to accept string arg names. #97, @tomxtobin.\n\n\n1.0.6 / 2016-02-06\n------------------\n\n- Maintenance: moved to eslint & updated CS.\n\n\n1.0.5 / 2016-02-05\n------------------\n\n- Removed lodash dependency to significantly reduce install size.\n  Thanks to @mourner.\n\n\n1.0.4 / 2016-01-17\n------------------\n\n- Maintenance: lodash update to 4.0.0.\n\n\n1.0.3 / 2015-10-27\n------------------\n\n- Fix parse `=` in args: `--examplepath=\"C:\\myfolder\\env=x64\"`. #84, @CatWithApple.\n\n\n1.0.2 / 2015-03-22\n------------------\n\n- Relaxed lodash version dependency.\n\n\n1.0.1 / 2015-02-20\n------------------\n\n- Changed dependencies to be compatible with ancient nodejs.\n\n\n1.0.0 / 2015-02-19\n------------------\n\n- Maintenance release.\n- Replaced `underscore` with `lodash`.\n- Bumped version to 1.0.0 to better reflect semver meaning.\n- HISTORY.md -> CHANGELOG.md\n\n\n0.1.16 / 2013-12-01\n-------------------\n\n- Maintenance release. Updated dependencies and docs.\n\n\n0.1.15 / 2013-05-13\n-------------------\n\n- Fixed #55, @trebor89\n\n\n0.1.14 / 2013-05-12\n-------------------\n\n- Fixed #62, @maxtaco\n\n\n0.1.13 / 2013-04-08\n-------------------\n\n- Added `.npmignore` to reduce package size\n\n\n0.1.12 / 2013-02-10\n-------------------\n\n- Fixed conflictHandler (#46), @hpaulj\n\n\n0.1.11 / 2013-02-07\n-------------------\n\n- Multiple bugfixes, @hpaulj\n- Added 70+ tests (ported from python), @hpaulj\n- Added conflictHandler, @applepicke\n- Added fromfilePrefixChar, @hpaulj\n\n\n0.1.10 / 2012-12-30\n-------------------\n\n- Added [mutual exclusion](http://docs.python.org/dev/library/argparse.html#mutual-exclusion)\n  support, thanks to @hpaulj\n- Fixed options check for `storeConst` & `appendConst` actions, thanks to @hpaulj\n\n\n0.1.9 / 2012-12-27\n------------------\n\n- Fixed option dest interferens with other options (issue #23), thanks to @hpaulj\n- Fixed default value behavior with `*` positionals, thanks to @hpaulj\n- Improve `getDefault()` behavior, thanks to @hpaulj\n- Imrove negative argument parsing, thanks to @hpaulj\n\n\n0.1.8 / 2012-12-01\n------------------\n\n- Fixed parser parents (issue #19), thanks to @hpaulj\n- Fixed negative argument parse (issue #20), thanks to @hpaulj\n\n\n0.1.7 / 2012-10-14\n------------------\n\n- Fixed 'choices' argument parse (issue #16)\n- Fixed stderr output (issue #15)\n\n\n0.1.6 / 2012-09-09\n------------------\n\n- Fixed check for conflict of options (thanks to @tomxtobin)\n\n\n0.1.5 / 2012-09-03\n------------------\n\n- Fix parser #setDefaults method (thanks to @tomxtobin)\n\n\n0.1.4 / 2012-07-30\n------------------\n\n- Fixed pseudo-argument support (thanks to @CGamesPlay)\n- Fixed addHelp default (should be true), if not set (thanks to @benblank)\n\n\n0.1.3 / 2012-06-27\n------------------\n\n- Fixed formatter api name: Formatter -> HelpFormatter\n\n\n0.1.2 / 2012-05-29\n------------------\n\n- Added basic tests\n- Removed excess whitespace in help\n- Fixed error reporting, when parcer with subcommands\n  called with empty arguments\n\n\n0.1.1 / 2012-05-23\n------------------\n\n- Fixed line wrapping in help formatter\n- Added better error reporting on invalid arguments\n\n\n0.1.0 / 2012-05-16\n------------------\n\n- First release."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/argparse/README.md",
            "content": "argparse\n========\n\n[![Build Status](https://secure.travis-ci.org/nodeca/argparse.svg?branch=master)](http://travis-ci.org/nodeca/argparse)\n[![NPM version](https://img.shields.io/npm/v/argparse.svg)](https://www.npmjs.org/package/argparse)\n\nCLI arguments parser for node.js. Javascript port of python's\n[argparse](http://docs.python.org/dev/library/argparse.html) module\n(original version 3.2). That's a full port, except some very rare options,\nrecorded in issue tracker.\n\n**NB. Difference with original.**\n\n- Method names changed to camelCase. See [generated docs](http://nodeca.github.com/argparse/).\n- Use `defaultValue` instead of `default`.\n- Use `argparse.Const.REMAINDER` instead of `argparse.REMAINDER`, and\n  similarly for constant values `OPTIONAL`, `ZERO_OR_MORE`, and `ONE_OR_MORE`\n  (aliases for `nargs` values `'?'`, `'*'`, `'+'`, respectively), and\n  `SUPPRESS`.\n\n\nExample\n=======\n\ntest.js file:\n\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse example'\n});\nparser.addArgument(\n  [ '-f', '--foo' ],\n  {\n    help: 'foo bar'\n  }\n);\nparser.addArgument(\n  [ '-b', '--bar' ],\n  {\n    help: 'bar foo'\n  }\n);\nparser.addArgument(\n  '--baz',\n  {\n    help: 'baz bar'\n  }\n);\nvar args = parser.parseArgs();\nconsole.dir(args);\n```\n\nDisplay help:\n\n```\n$ ./test.js -h\nusage: example.js [-h] [-v] [-f FOO] [-b BAR] [--baz BAZ]\n\nArgparse example\n\nOptional arguments:\n  -h, --help         Show this help message and exit.\n  -v, --version      Show program's version number and exit.\n  -f FOO, --foo FOO  foo bar\n  -b BAR, --bar BAR  bar foo\n  --baz BAZ          baz bar\n```\n\nParse arguments:\n\n```\n$ ./test.js -f=3 --bar=4 --baz 5\n{ foo: '3', bar: '4', baz: '5' }\n```\n\nMore [examples](https://github.com/nodeca/argparse/tree/master/examples).\n\n\nArgumentParser objects\n======================\n\n```\nnew ArgumentParser({parameters hash});\n```\n\nCreates a new ArgumentParser object.\n\n**Supported params:**\n\n- ```description``` - Text to display before the argument help.\n- ```epilog``` - Text to display after the argument help.\n- ```addHelp``` - Add a -h/â€“help option to the parser. (default: true)\n- ```argumentDefault``` - Set the global default value for arguments. (default: null)\n- ```parents``` - A list of ArgumentParser objects whose arguments should also be included.\n- ```prefixChars``` - The set of characters that prefix optional arguments. (default: â€˜-â€˜)\n- ```formatterClass``` - A class for customizing the help output.\n- ```prog``` - The name of the program (default: `path.basename(process.argv[1])`)\n- ```usage``` - The string describing the program usage (default: generated)\n- ```conflictHandler``` - Usually unnecessary, defines strategy for resolving conflicting optionals.\n\n**Not supported yet**\n\n- ```fromfilePrefixChars``` - The set of characters that prefix files from which additional arguments should be read.\n\n\nDetails in [original ArgumentParser guide](http://docs.python.org/dev/library/argparse.html#argumentparser-objects)\n\n\naddArgument() method\n====================\n\n```\nArgumentParser.addArgument(name or flag or [name] or [flags...], {options})\n```\n\nDefines how a single command-line argument should be parsed.\n\n- ```name or flag or [name] or [flags...]``` - Either a positional name\n  (e.g., `'foo'`), a single option (e.g., `'-f'` or `'--foo'`), an array\n  of a single positional name (e.g., `['foo']`), or an array of options\n  (e.g., `['-f', '--foo']`).\n\nOptions:\n\n- ```action``` - The basic type of action to be taken when this argument is encountered at the command line.\n- ```nargs```- The number of command-line arguments that should be consumed.\n- ```constant``` - A constant value required by some action and nargs selections.\n- ```defaultValue``` - The value produced if the argument is absent from the command line.\n- ```type``` - The type to which the command-line argument should be converted.\n- ```choices``` - A container of the allowable values for the argument.\n- ```required``` - Whether or not the command-line option may be omitted (optionals only).\n- ```help``` - A brief description of what the argument does.\n- ```metavar``` - A name for the argument in usage messages.\n- ```dest``` - The name of the attribute to be added to the object returned by parseArgs().\n\nDetails in [original add_argument guide](http://docs.python.org/dev/library/argparse.html#the-add-argument-method)\n\n\nAction (some details)\n================\n\nArgumentParser objects associate command-line arguments with actions.\nThese actions can do just about anything with the command-line arguments associated\nwith them, though most actions simply add an attribute to the object returned by\nparseArgs(). The action keyword argument specifies how the command-line arguments\nshould be handled. The supported actions are:\n\n- ```store``` - Just stores the argumentâ€™s value. This is the default action.\n- ```storeConst``` - Stores value, specified by the const keyword argument.\n  (Note that the const keyword argument defaults to the rather unhelpful None.)\n  The 'storeConst' action is most commonly used with optional arguments, that\n  specify some sort of flag.\n- ```storeTrue``` and ```storeFalse``` - Stores values True and False\n  respectively. These are special cases of 'storeConst'.\n- ```append``` - Stores a list, and appends each argument value to the list.\n  This is useful to allow an option to be specified multiple times.\n- ```appendConst``` - Stores a list, and appends value, specified by the\n  const keyword argument to the list. (Note, that the const keyword argument defaults\n  is None.) The 'appendConst' action is typically used when multiple arguments need\n  to store constants to the same list.\n- ```count``` - Counts the number of times a keyword argument occurs. For example,\n  used for increasing verbosity levels.\n- ```help``` - Prints a complete help message for all the options in the current\n  parser and then exits. By default a help action is automatically added to the parser.\n  See ArgumentParser for details of how the output is created.\n- ```version``` - Prints version information and exit. Expects a `version=`\n  keyword argument in the addArgument() call.\n\nDetails in [original action guide](http://docs.python.org/dev/library/argparse.html#action)\n\n\nSub-commands\n============\n\nArgumentParser.addSubparsers()\n\nMany programs split their functionality into a number of sub-commands, for\nexample, the svn program can invoke sub-commands like `svn checkout`, `svn update`,\nand `svn commit`. Splitting up functionality this way can be a particularly good\nidea when a program performs several different functions which require different\nkinds of command-line arguments. `ArgumentParser` supports creation of such\nsub-commands with `addSubparsers()` method. The `addSubparsers()` method is\nnormally called with no arguments and returns an special action object.\nThis object has a single method `addParser()`, which takes a command name and\nany `ArgumentParser` constructor arguments, and returns an `ArgumentParser` object\nthat can be modified as usual.\n\nExample:\n\nsub_commands.js\n```javascript\n#!/usr/bin/env node\n'use strict';\n\nvar ArgumentParser = require('../lib/argparse').ArgumentParser;\nvar parser = new ArgumentParser({\n  version: '0.0.1',\n  addHelp:true,\n  description: 'Argparse examples: sub-commands',\n});\n\nvar subparsers = parser.addSubparsers({\n  title:'subcommands',\n  dest:\"subcommand_name\"\n});\n\nvar bar = subparsers.addParser('c1', {addHelp:true});\nbar.addArgument(\n  [ '-f', '--foo' ],\n  {\n    action: 'store',\n    help: 'foo3 bar3'\n  }\n);\nvar bar = subparsers.addParser(\n  'c2',\n  {aliases:['co'], addHelp:true}\n);\nbar.addArgument(\n  [ '-b', '--bar' ],\n  {\n    action: 'store',\n    type: 'int',\n    help: 'foo3 bar3'\n  }\n);\n\nvar args = parser.parseArgs();\nconsole.dir(args);\n\n```\n\nDetails in [original sub-commands guide](http://docs.python.org/dev/library/argparse.html#sub-commands)\n\n\nContributors\n============\n\n- [Eugene Shkuropat](https://github.com/shkuropat)\n- [Paul Jacobson](https://github.com/hpaulj)\n\n[others](https://github.com/nodeca/argparse/graphs/contributors)\n\nLicense\n=======\n\nCopyright (c) 2012 [Vitaly Puzrin](https://github.com/puzrin).\nReleased under the MIT license. See\n[LICENSE](https://github.com/nodeca/argparse/blob/master/LICENSE) for details."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/balanced-match/LICENSE.md",
            "content": "(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/balanced-match/README.md",
            "content": "# balanced-match\n\nMatch balanced string pairs, like `{` and `}` or `<b>` and `</b>`. Supports regular expressions as well!\n\n[![build status](https://secure.travis-ci.org/juliangruber/balanced-match.svg)](http://travis-ci.org/juliangruber/balanced-match)\n[![downloads](https://img.shields.io/npm/dm/balanced-match.svg)](https://www.npmjs.org/package/balanced-match)\n\n[![testling badge](https://ci.testling.com/juliangruber/balanced-match.png)](https://ci.testling.com/juliangruber/balanced-match)\n\n## Example\n\nGet the first matching pair of braces:\n\n```js\nvar balanced = require('balanced-match');\n\nconsole.log(balanced('{', '}', 'pre{in{nested}}post'));\nconsole.log(balanced('{', '}', 'pre{first}between{second}post'));\nconsole.log(balanced(/\\s+\\{\\s+/, /\\s+\\}\\s+/, 'pre  {   in{nest}   }  post'));\n```\n\nThe matches are:\n\n```bash\n$ node example.js\n{ start: 3, end: 14, pre: 'pre', body: 'in{nested}', post: 'post' }\n{ start: 3,\n  end: 9,\n  pre: 'pre',\n  body: 'first',\n  post: 'between{second}post' }\n{ start: 3, end: 17, pre: 'pre', body: 'in{nest}', post: 'post' }\n```\n\n## API\n\n### var m = balanced(a, b, str)\n\nFor the first non-nested matching pair of `a` and `b` in `str`, return an\nobject with those keys:\n\n* **start** the index of the first match of `a`\n* **end** the index of the matching `b`\n* **pre** the preamble, `a` and `b` not included\n* **body** the match, `a` and `b` not included\n* **post** the postscript, `a` and `b` not included\n\nIf there's no match, `undefined` will be returned.\n\nIf the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `['{', 'a', '']` and `{a}}` will match `['', 'a', '}']`.\n\n### var r = balanced.range(a, b, str)\n\nFor the first non-nested matching pair of `a` and `b` in `str`, return an\narray with indexes: `[ <a index>, <b index> ]`.\n\nIf there's no match, `undefined` will be returned.\n\nIf the `str` contains more `a` than `b` / there are unmatched pairs, the first match that was closed will be used. For example, `{{a}` will match `[ 1, 3 ]` and `{a}}` will match `[0, 2]`.\n\n## Installation\n\nWith [npm](https://npmjs.org) do:\n\n```bash\nnpm install balanced-match\n```\n\n## Security contact information\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/brace-expansion/README.md",
            "content": "# brace-expansion\n\n[Brace expansion](https://www.gnu.org/software/bash/manual/html_node/Brace-Expansion.html), \nas known from sh/bash, in JavaScript.\n\n[![build status](https://secure.travis-ci.org/juliangruber/brace-expansion.svg)](http://travis-ci.org/juliangruber/brace-expansion)\n[![downloads](https://img.shields.io/npm/dm/brace-expansion.svg)](https://www.npmjs.org/package/brace-expansion)\n[![Greenkeeper badge](https://badges.greenkeeper.io/juliangruber/brace-expansion.svg)](https://greenkeeper.io/)\n\n[![testling badge](https://ci.testling.com/juliangruber/brace-expansion.png)](https://ci.testling.com/juliangruber/brace-expansion)\n\n## Example\n\n```js\nvar expand = require('brace-expansion');\n\nexpand('file-{a,b,c}.jpg')\n// => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg']\n\nexpand('-v{,,}')\n// => ['-v', '-v', '-v']\n\nexpand('file{0..2}.jpg')\n// => ['file0.jpg', 'file1.jpg', 'file2.jpg']\n\nexpand('file-{a..c}.jpg')\n// => ['file-a.jpg', 'file-b.jpg', 'file-c.jpg']\n\nexpand('file{2..0}.jpg')\n// => ['file2.jpg', 'file1.jpg', 'file0.jpg']\n\nexpand('file{0..4..2}.jpg')\n// => ['file0.jpg', 'file2.jpg', 'file4.jpg']\n\nexpand('file-{a..e..2}.jpg')\n// => ['file-a.jpg', 'file-c.jpg', 'file-e.jpg']\n\nexpand('file{00..10..5}.jpg')\n// => ['file00.jpg', 'file05.jpg', 'file10.jpg']\n\nexpand('{{A..C},{a..c}}')\n// => ['A', 'B', 'C', 'a', 'b', 'c']\n\nexpand('ppp{,config,oe{,conf}}')\n// => ['ppp', 'pppconfig', 'pppoe', 'pppoeconf']\n```\n\n## API\n\n```js\nvar expand = require('brace-expansion');\n```\n\n### var expanded = expand(str)\n\nReturn an array of all possible and valid expansions of `str`. If none are\nfound, `[str]` is returned.\n\nValid expansions are:\n\n```js\n/^(.*,)+(.+)?$/\n// {a,b,...}\n```\n\nA comma separated list of options, like `{a,b}` or `{a,{b,c}}` or `{,a,}`.\n\n```js\n/^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/\n// {x..y[..incr]}\n```\n\nA numeric sequence from `x` to `y` inclusive, with optional increment.\nIf `x` or `y` start with a leading `0`, all the numbers will be padded\nto have equal length. Negative numbers and backwards iteration work too.\n\n```js\n/^-?\\d+\\.\\.-?\\d+(\\.\\.-?\\d+)?$/\n// {x..y[..incr]}\n```\n\nAn alphabetic sequence from `x` to `y` inclusive, with optional increment.\n`x` and `y` must be exactly one character, and if given, `incr` must be a\nnumber.\n\nFor compatibility reasons, the string `${` is not eligible for brace expansion.\n\n## Installation\n\nWith [npm](https://npmjs.org) do:\n\n```bash\nnpm install brace-expansion\n```\n\n## Contributors\n\n- [Julian Gruber](https://github.com/juliangruber)\n- [Isaac Z. Schlueter](https://github.com/isaacs)\n\n## Sponsors\n\nThis module is proudly supported by my [Sponsors](https://github.com/juliangruber/sponsors)!\n\nDo you want to support modules like this to improve their quality, stability and weigh in on new features? Then please consider donating to my [Patreon](https://www.patreon.com/juliangruber). Not sure how much of my modules you're using? Try [feross/thanks](https://github.com/feross/thanks)!\n\n## License\n\n(MIT)\n\nCopyright (c) 2013 Julian Gruber &lt;julian@juliangruber.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/esprima/README.md",
            "content": "[![NPM version](https://img.shields.io/npm/v/esprima.svg)](https://www.npmjs.com/package/esprima)\n[![npm download](https://img.shields.io/npm/dm/esprima.svg)](https://www.npmjs.com/package/esprima)\n[![Build Status](https://img.shields.io/travis/jquery/esprima/master.svg)](https://travis-ci.org/jquery/esprima)\n[![Coverage Status](https://img.shields.io/codecov/c/github/jquery/esprima/master.svg)](https://codecov.io/github/jquery/esprima)\n\n**Esprima** ([esprima.org](http://esprima.org), BSD license) is a high performance,\nstandard-compliant [ECMAScript](http://www.ecma-international.org/publications/standards/Ecma-262.htm)\nparser written in ECMAScript (also popularly known as\n[JavaScript](https://en.wikipedia.org/wiki/JavaScript)).\nEsprima is created and maintained by [Ariya Hidayat](https://twitter.com/ariyahidayat),\nwith the help of [many contributors](https://github.com/jquery/esprima/contributors).\n\n### Features\n\n- Full support for ECMAScript 2017 ([ECMA-262 8th Edition](http://www.ecma-international.org/publications/standards/Ecma-262.htm))\n- Sensible [syntax tree format](https://github.com/estree/estree/blob/master/es5.md) as standardized by [ESTree project](https://github.com/estree/estree)\n- Experimental support for [JSX](https://facebook.github.io/jsx/), a syntax extension for [React](https://facebook.github.io/react/)\n- Optional tracking of syntax node location (index-based and line-column)\n- [Heavily tested](http://esprima.org/test/ci.html) (~1500 [unit tests](https://github.com/jquery/esprima/tree/master/test/fixtures) with [full code coverage](https://codecov.io/github/jquery/esprima))\n\n### API\n\nEsprima can be used to perform [lexical analysis](https://en.wikipedia.org/wiki/Lexical_analysis) (tokenization) or [syntactic analysis](https://en.wikipedia.org/wiki/Parsing) (parsing) of a JavaScript program.\n\nA simple example on Node.js REPL:\n\n```javascript\n> var esprima = require('esprima');\n> var program = 'const answer = 42';\n\n> esprima.tokenize(program);\n[ { type: 'Keyword', value: 'const' },\n  { type: 'Identifier', value: 'answer' },\n  { type: 'Punctuator', value: '=' },\n  { type: 'Numeric', value: '42' } ]\n  \n> esprima.parseScript(program);\n{ type: 'Program',\n  body:\n   [ { type: 'VariableDeclaration',\n       declarations: [Object],\n       kind: 'const' } ],\n  sourceType: 'script' }\n```\n\nFor more information, please read the [complete documentation](http://esprima.org/doc)."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/extend-shallow/README.md",
            "content": "# extend-shallow [![NPM version](https://badge.fury.io/js/extend-shallow.svg)](http://badge.fury.io/js/extend-shallow)  [![Build Status](https://travis-ci.org/jonschlinkert/extend-shallow.svg)](https://travis-ci.org/jonschlinkert/extend-shallow)\n\n> Extend an object with the properties of additional objects. node.js/javascript util.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i extend-shallow --save\n```\n\n## Usage\n\n```js\nvar extend = require('extend-shallow');\n\nextend({a: 'b'}, {c: 'd'})\n//=> {a: 'b', c: 'd'}\n```\n\nPass an empty object to shallow clone:\n\n```js\nvar obj = {};\nextend(obj, {a: 'b'}, {c: 'd'})\n//=> {a: 'b', c: 'd'}\n```\n\n## Related\n\n* [extend-shallow](https://github.com/jonschlinkert/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util.\n* [for-own](https://github.com/jonschlinkert/for-own): Iterate over the own enumerable properties of an object, and return an object with propertiesâ€¦ [more](https://github.com/jonschlinkert/for-own)\n* [for-in](https://github.com/jonschlinkert/for-in): Iterate over the own and inherited enumerable properties of an objecte, and return an objectâ€¦ [more](https://github.com/jonschlinkert/for-in)\n* [is-plain-object](https://github.com/jonschlinkert/is-plain-object): Returns true if an object was created by the `Object` constructor.\n* [isobject](https://github.com/jonschlinkert/isobject): Returns true if the value is an object and not an array or null.\n* [kind-of](https://github.com/jonschlinkert/kind-of): Get the native type of a value.\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright Â© 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on June 29, 2015._"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/gray-matter/CHANGELOG.md",
            "content": "# Release history\n\n## 4.0.0 - 2018-04-01\n\n### Breaking changes\n\n- Now requires node v4 or higher. \n\n\n## 3.0.0 - 2017-06-30\n\n### Breaking changes\n\n- `toml`, `coffee` and `cson` are no longer supported by default. Please see [`options.engines`](README.md#optionsengines) and the [examples](./examples) to learn how to add engines.\n\n### Added\n\n- Support for [excerpts](README.md#optionsexcerpt).\n- The returned object now has non-enumerable `matter` and `stringify` properties.\n\n### Changed\n\n- Refactored engines (parsers), so that it's easier to add parsers and stringifiers.\n- `options.parsers` was renamed to [`options.engines`](README.md#optionsengines)"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/gray-matter/README.md",
            "content": "# gray-matter [![NPM version](https://img.shields.io/npm/v/gray-matter.svg?style=flat)](https://www.npmjs.com/package/gray-matter) [![NPM monthly downloads](https://img.shields.io/npm/dm/gray-matter.svg?style=flat)](https://npmjs.org/package/gray-matter) [![NPM total downloads](https://img.shields.io/npm/dt/gray-matter.svg?style=flat)](https://npmjs.org/package/gray-matter) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/gray-matter.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/gray-matter)\n\n> Parse front-matter from a string or file. Fast, reliable and easy to use. Parses YAML front matter by default, but also has support for YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters. Used by metalsmith, assemble, verb and many other projects.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save gray-matter\n```\n\n## Heads up!\n\nPlease see the [changelog](CHANGELOG.md) to learn about breaking changes that were made in v3.0.\n\n## What does this do?\n\n<details>\n<summary><strong>Run this example</strong></summary>\n\nAdd the HTML in the following example to `example.html`, then add the following code to `example.js` and run `$ node example` (without the `$`):\n\n```js\nconst fs = require('fs');\nconst matter = require('gray-matter');\nconst str = fs.readFileSync('example.html', 'utf8');\nconsole.log(matter(str));\n```\n\n</details>\n\nConverts a string with front-matter, like this:\n\n```handlebars\n---\ntitle: Hello\nslug: home\n---\n<h1>Hello world!</h1>\n```\n\nInto an object like this:\n\n```js\n{\n  content: '<h1>Hello world!</h1>',\n  data: { \n    title: 'Hello', \n    slug: 'home' \n  }\n}\n```\n\n## Why use gray-matter?\n\n* **simple**: main function takes a string and returns an object\n* **accurate**: better at catching and handling edge cases than front-matter parsers that rely on regex for parsing\n* **fast**: faster than other front-matter parsers that use regex for parsing\n* **flexible**: By default, gray-matter is capable of parsing [YAML](https://github.com/nodeca/js-yaml), [JSON](http://en.wikipedia.org/wiki/Json) and JavaScript front-matter. But other [engines](#optionsengines) may be added.\n* **extensible**: Use [custom delimiters](#optionsdelimiters), or add support for [any language](#optionsengines), like [TOML](http://github.com/mojombo/toml), [CoffeeScript](http://coffeescript.org), or [CSON](https://github.com/bevry/cson)\n* **battle-tested**: used by [assemble](https://github.com/assemble/assemble), [metalsmith](https://github.com/segmentio/metalsmith), [phenomic](https://github.com/phenomic/phenomic), [verb](https://github.com/assemble/verb), [generate](https://github.com/generate/generate), [update](https://github.com/update/update) and many others.\n\n<details>\n<summary><strong>Rationale</strong></summary>\n\n**Why did we create gray-matter in the first place?**\n\nWe created gray-matter after trying out other libraries that failed to meet our standards and requirements.\n\nSome libraries met most of the requirements, but _none met all of them_.\n\n**Here are the most important**:\n\n* Be usable, if not simple\n* Use a dependable and well-supported library for parsing YAML\n* Support other languages besides YAML\n* Support stringifying back to YAML or another language\n* Don't fail when no content exists\n* Don't fail when no front matter exists\n* Don't use regex for parsing. This is a relatively simple parsing operation, and regex is the slowest and most error-prone way to do it.\n* Have no problem reading YAML files directly\n* Have no problem with complex content, including **non-front-matter** fenced code blocks that contain examples of YAML front matter. Other parsers fail on this.\n* Support stringifying back to front-matter. This is useful for linting, updating properties, etc.\n* Allow custom delimiters, when it's necessary for avoiding delimiter collision.\n* Should return an object with at least these three properties:\n  - `data`: the parsed YAML front matter, as a JSON object\n  - `content`: the contents as a string, without the front matter\n  - `orig`: the \"original\" content (for debugging)\n\n</details>\n\n## Usage\n\nUsing Node's `require()` system:\n\n```js\nconst matter = require('gray-matter');\n```\n\nOr with [typescript](https://www.typescriptlang.org)\n\n```js\nimport matter = require('gray-matter');\n// OR\nimport * as matter from 'gray-matter';\n```\n\nPass a string and [options](#options) to gray-matter:\n\n```js\nconsole.log(matter('---\\ntitle: Front Matter\\n---\\nThis is content.'));\n```\n\nReturns:\n\n```js\n{\n  content: '\\nThis is content.',\n  data: { \n    title: 'Front Matter' \n  } \n}\n```\n\nMore about the returned object in the following section.\n\n***\n\n## Returned object\n\ngray-matter returns a `file` object with the following properties.\n\n**Enumerable**\n\n* `file.data` **{Object}**: the object created by parsing front-matter\n* `file.content` **{String}**: the input string, with `matter` stripped\n* `file.excerpt` **{String}**: an excerpt, if [defined on the options](#optionsexcerpt)\n* `file.empty` **{String}**: when the front-matter is \"empty\" (either all whitespace, nothing at all, or just comments and no data), the original string is set on this property. See [#65](https://github.com/jonschlinkert/gray-matter/issues/65) for details regarding use case.\n* `file.isEmpty` **{Boolean}**: true if front-matter is empty.\n\n**Non-enumerable**\n\nIn addition, the following non-enumberable properties are added to the object to help with debugging.\n\n* `file.orig` **{Buffer}**: the original input string (or buffer)\n* `file.language` **{String}**: the front-matter language that was parsed. `yaml` is the default\n* `file.matter` **{String}**: the _raw_, un-parsed front-matter string\n* `file.stringify` **{Function}**: [stringify](#stringify) the file by converting `file.data` to a string in the given language, wrapping it in delimiters and prepending it to `file.content`.\n\n## Run the examples\n\nIf you'd like to test-drive the examples, first clone gray-matter into `my-project` (or wherever you want):\n\n```sh\n$ git clone https://github.com/jonschlinkert/gray-matter my-project\n```\n\nCD into `my-project` and install dependencies:\n\n```sh\n$ cd my-project && npm install\n```\n\nThen run any of the [examples](./examples) to see how gray-matter works:\n\n```sh\n$ node examples/<example_name>\n```\n\n**Links to examples**\n\n* [coffee](examples/coffee.js)\n* [excerpt-separator](examples/excerpt-separator.js)\n* [excerpt-stringify](examples/excerpt-stringify.js)\n* [excerpt](examples/excerpt.js)\n* [javascript](examples/javascript.js)\n* [json-stringify](examples/json-stringify.js)\n* [json](examples/json.js)\n* [restore-empty](examples/restore-empty.js)\n* [sections-excerpt](examples/sections-excerpt.js)\n* [sections](examples/sections.js)\n* [toml](examples/toml.js)\n* [yaml-stringify](examples/yaml-stringify.js)\n* [yaml](examples/yaml.js)\n\n## API\n\n### [matter](index.js#L29)\n\nTakes a string or object with `content` property, extracts and parses front-matter from the string, then returns an object with `data`, `content` and other [useful properties](#returned-object).\n\n**Params**\n\n* `input` **{Object|String}**: String, or object with `content` string\n* `options` **{Object}**\n* `returns` **{Object}**\n\n**Example**\n\n```js\nconst matter = require('gray-matter');\nconsole.log(matter('---\\ntitle: Home\\n---\\nOther stuff'));\n//=> { data: { title: 'Home'}, content: 'Other stuff' }\n```\n\n### [.stringify](index.js#L160)\n\nStringify an object to YAML or the specified language, and append it to the given string. By default, only YAML and JSON can be stringified. See the [engines](#engines) section to learn how to stringify other languages.\n\n**Params**\n\n* `file` **{String|Object}**: The content string to append to stringified front-matter, or a file object with `file.content` string.\n* `data` **{Object}**: Front matter to stringify.\n* `options` **{Object}**: [Options](#options) to pass to gray-matter and [js-yaml](https://github.com/nodeca/js-yaml).\n* `returns` **{String}**: Returns a string created by wrapping stringified yaml with delimiters, and appending that to the given string.\n\n**Example**\n\n```js\nconsole.log(matter.stringify('foo bar baz', {title: 'Home'}));\n// results in:\n// ---\n// title: Home\n// ---\n// foo bar baz\n```\n\n### [.read](index.js#L178)\n\nSynchronously read a file from the file system and parse front matter. Returns the same object as the [main function](#matter).\n\n**Params**\n\n* `filepath` **{String}**: file path of the file to read.\n* `options` **{Object}**: [Options](#options) to pass to gray-matter.\n* `returns` **{Object}**: Returns [an object](#returned-object) with `data` and `content`\n\n**Example**\n\n```js\nconst file = matter.read('./content/blog-post.md');\n```\n\n### [.test](index.js#L193)\n\nReturns true if the given `string` has front matter.\n\n**Params**\n\n* `string` **{String}**\n* `options` **{Object}**\n* `returns` **{Boolean}**: True if front matter exists.\n\n## Options\n\n### options.excerpt\n\n**Type**: `Boolean|Function`\n\n**Default**: `undefined`\n\nExtract an excerpt that directly follows front-matter, or is the first thing in the string if no front-matter exists.\n\nIf set to `excerpt: true`, it will look for the frontmatter delimiter, `---` by default and grab everything leading up to it.\n\n**Example**\n\n```js\nconst str = '---\\nfoo: bar\\n---\\nThis is an excerpt.\\n---\\nThis is content';\nconst file = matter(str, { excerpt: true });\n```\n\nResults in:\n\n```js\n{ \n  content: 'This is an excerpt.\\n---\\nThis is content',\n  data: { foo: 'bar' },\n  excerpt: 'This is an excerpt.\\n' \n}\n```\n\nYou can also set `excerpt` to a function. This function uses the 'file' and 'options' that were initially passed to gray-matter as parameters, so you can control how the excerpt is extracted from the content.\n\n**Example**\n\n```js\n// returns the first 4 lines of the contents\nfunction firstFourLines(file, options) {\n  file.excerpt = file.content.split('\\n').slice(0, 4).join(' ');\n}\n\nconst file =  matter([\n  '---',\n  'foo: bar',\n  '---',\n  'Only this',\n  'will be',\n  'in the',\n  'excerpt',\n  'but not this...'\n].join('\\n'), {excerpt: firstFourLines});\n```\n\nResults in:\n\n```js\n{ \n  content: 'Only this\\nwill be\\nin the\\nexcerpt\\nbut not this...',\n  data: { foo: 'bar' },\n  excerpt: 'Only this will be in the excerpt'\n}\n```\n\n### options.excerpt_separator\n\n**Type**: `String`\n\n**Default**: `undefined`\n\nDefine a custom separator to use for excerpts.\n\n```js\nconsole.log(matter(string, {excerpt_separator: '<!-- end -->'}));\n```\n\n**Example**\n\nThe following HTML string:\n\n```html\n---\ntitle: Blog\n---\nMy awesome blog.\n<!-- end -->\n<h1>Hello world</h1>\n```\n\nResults in:\n\n```js\n{ \n  data: { title: 'Blog'}, \n  excerpt: 'My awesome blog.', \n  content: 'My awesome blog.\\n<!-- end -->\\n<h1>Hello world</h1>' \n}\n```\n\n### options.engines\n\nDefine custom engines for parsing and/or stringifying front-matter.\n\n**Type**: `Object` Object of engines\n\n**Default**: `JSON`, `YAML` and `JavaScript` are already handled by default.\n\n**Engine format**\n\nEngines may either be an object with `parse` and (optionally) `stringify` methods, or a function that will be used for parsing only.\n\n**Examples**\n\n```js\nconst toml = require('toml');\n\n/**\n * defined as a function\n */\n\nconst file = matter(str, {\n  engines: {\n    toml: toml.parse.bind(toml),\n  }\n});\n\n/**\n * Or as an object\n */\n\nconst file = matter(str, {\n  engines: {\n    toml: {\n      parse: toml.parse.bind(toml),\n\n      // example of throwing an error to let users know stringifying is\n      // not supported (a TOML stringifier might exist, this is just an example)\n      stringify: function() {\n        throw new Error('cannot stringify to TOML');\n      }\n    }\n  }\n});\n\nconsole.log(file);\n```\n\n### options.language\n\n**Type**: `String`\n\n**Default**: `yaml`\n\nDefine the engine to use for parsing front-matter.\n\n```js\nconsole.log(matter(string, {language: 'toml'}));\n```\n\n**Example**\n\nThe following HTML string:\n\n```html\n---\ntitle = \"TOML\"\ndescription = \"Front matter\"\ncategories = \"front matter toml\"\n---\nThis is content\n```\n\nResults in:\n\n```js\n{ content: 'This is content',\n  excerpt: '',\n  data:\n   { title: 'TOML',\n     description: 'Front matter',\n     categories: 'front matter toml' } }\n```\n\n**Dynamic language detection**\n\nInstead of defining the language on the options, gray-matter will automatically detect the language defined after the first delimiter and select the correct engine to use for parsing.\n\n```html\n---toml\ntitle = \"TOML\"\ndescription = \"Front matter\"\ncategories = \"front matter toml\"\n---\nThis is content\n```\n\n### options.delimiters\n\n**Type**: `String`\n\n**Default**: `---`\n\nOpen and close delimiters can be passed in as an array of strings.\n\n**Example:**\n\n```js\n// format delims as a string\nmatter.read('file.md', {delims: '~~~'});\n// or an array (open/close)\nmatter.read('file.md', {delims: ['~~~', '~~~']});\n```\n\nwould parse:\n\n```html\n~~~\ntitle: Home\n~~~\nThis is the {{title}} page.\n```\n\n## Deprecated options\n\n### options.lang\n\nDecrecated, please use [options.language](#optionslanguage) instead.\n\n### options.delims\n\nDecrecated, please use [options.delimiters](#optionsdelimiters) instead.\n\n### options.parsers\n\nDecrecated, please use [options.engines](#optionsengines) instead.\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projectsâ€¦ [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble \"Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit\")\n* [metalsmith](https://www.npmjs.com/package/metalsmith): An extremely simple, pluggable static site generator. | [homepage](https://github.com/segmentio/metalsmith#readme \"An extremely simple, pluggable static site generator.\")\n* [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is usedâ€¦ [more](https://github.com/verbose/verb) | [homepage](https://github.com/verbose/verb \"Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used on hundreds of projects of all sizes to generate everything from API docs to readmes.\")\n* [gray-matter-loader](https://github.com/atlassian/gray-matter-loader): A webpack loader for gray-matter. [homepage](https://github.com/atlassian/gray-matter-loader#gray-matter-loader)\n\n### Contributors\n\n| **Commits** | **Contributor** | \n| --- | --- |\n| 174 | [jonschlinkert](https://github.com/jonschlinkert) |\n| 7 | [RobLoach](https://github.com/RobLoach) |\n| 5 | [heymind](https://github.com/heymind) |\n| 4 | [doowb](https://github.com/doowb) |\n| 3 | [aljopro](https://github.com/aljopro) |\n| 2 | [reccanti](https://github.com/reccanti) |\n| 2 | [onokumus](https://github.com/onokumus) |\n| 2 | [moozzyk](https://github.com/moozzyk) |\n| 1 | [Ajedi32](https://github.com/Ajedi32) |\n| 1 | [caesar](https://github.com/caesar) |\n| 1 | [ianstormtaylor](https://github.com/ianstormtaylor) |\n| 1 | [qm3ster](https://github.com/qm3ster) |\n| 1 | [zachwhaley](https://github.com/zachwhaley) |\n\n### Author\n\n**Jon Schlinkert**\n\n* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n* [GitHub Profile](https://github.com/jonschlinkert)\n* [Twitter Profile](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2018, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on April 01, 2018._"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/is-extendable/README.md",
            "content": "# is-extendable [![NPM version](https://badge.fury.io/js/is-extendable.svg)](http://badge.fury.io/js/is-extendable)\n\n> Returns true if a value is any of the object types: array, regexp, plain object, function or date. This is useful for determining if a value can be extended, e.g. \"can the value have keys?\"\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/)\n\n```sh\n$ npm i is-extendable --save\n```\n\n## Usage\n\n```js\nvar isExtendable = require('is-extendable');\n```\n\nReturns true if the value is any of the following:\n\n* `array`\n* `regexp`\n* `plain object`\n* `function`\n* `date`\n* `error`\n\n## Notes\n\nAll objects in JavaScript can have keys, but it's a pain to check for this, since we ether need to verify that the value is not `null` or `undefined` and:\n\n* the value is not a primitive, or\n* that the object is an `object`, `function`\n\nAlso note that an `extendable` object is not the same as an [extensible object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/isExtensible), which is one that (in es6) is not sealed, frozen, or marked as non-extensible using `preventExtensions`.\n\n## Related projects\n\n* [assign-deep](https://github.com/jonschlinkert/assign-deep): Deeply assign the enumerable properties of source objects to a destination object.\n* [extend-shallow](https://github.com/jonschlinkert/extend-shallow): Extend an object with the properties of additional objects. node.js/javascript util.\n* [isobject](https://github.com/jonschlinkert/isobject): Returns true if the value is an object and not an array or null.\n* [is-plain-object](https://github.com/jonschlinkert/is-plain-object): Returns true if an object was created by the `Object` constructor.\n* [is-equal-shallow](https://github.com/jonschlinkert/is-equal-shallow): Does a shallow comparison of two objects, returning false if the keys or values differ.\n* [kind-of](https://github.com/jonschlinkert/kind-of): Get the native type of a value.\n\n## Running tests\n\nInstall dev dependencies:\n\n```sh\n$ npm i -d && npm test\n```\n\n## Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](https://github.com/jonschlinkert/is-extendable/issues/new)\n\n## Author\n\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](http://twitter.com/jonschlinkert)\n\n## License\n\nCopyright Â© 2015 Jon Schlinkert\nReleased under the MIT license.\n\n***\n\n_This file was generated by [verb-cli](https://github.com/assemble/verb-cli) on July 04, 2015._"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/js-yaml/CHANGELOG.md",
            "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n\n## [3.14.1] - 2020-12-07\n### Security\n- Fix possible code execution in (already unsafe) `.load()` (in &anchor).\n\n\n## [3.14.0] - 2020-05-22\n### Changed\n- Support `safe/loadAll(input, options)` variant of call.\n- CI: drop outdated nodejs versions.\n- Dev deps bump.\n\n### Fixed\n- Quote `=` in plain scalars #519.\n- Check the node type for `!<?>` tag in case user manually specifies it.\n- Verify that there are no null-bytes in input.\n- Fix wrong quote position when writing condensed flow, #526.\n\n\n## [3.13.1] - 2019-04-05\n### Security\n- Fix possible code execution in (already unsafe) `.load()`, #480.\n\n\n## [3.13.0] - 2019-03-20\n### Security\n- Security fix: `safeLoad()` can hang when arrays with nested refs\n  used as key. Now throws exception for nested arrays. #475.\n\n\n## [3.12.2] - 2019-02-26\n### Fixed\n- Fix `noArrayIndent` option for root level, #468.\n\n\n## [3.12.1] - 2019-01-05\n### Added\n- Added `noArrayIndent` option, #432.\n\n\n## [3.12.0] - 2018-06-02\n### Changed\n- Support arrow functions without a block statement, #421.\n\n\n## [3.11.0] - 2018-03-05\n### Added\n- Add arrow functions suport for `!!js/function`.\n\n### Fixed\n- Fix dump in bin/octal/hex formats for negative integers, #399.\n\n\n## [3.10.0] - 2017-09-10\n### Fixed\n- Fix `condenseFlow` output (quote keys for sure, instead of spaces), #371, #370.\n- Dump astrals as codepoints instead of surrogate pair, #368.\n\n\n## [3.9.1] - 2017-07-08\n### Fixed\n- Ensure stack is present for custom errors in node 7.+, #351.\n\n\n## [3.9.0] - 2017-07-08\n### Added\n- Add `condenseFlow` option (to create pretty URL query params), #346.\n\n### Fixed\n- Support array return from safeLoadAll/loadAll, #350.\n\n\n## [3.8.4] - 2017-05-08\n### Fixed\n- Dumper: prevent space after dash for arrays that wrap, #343.\n\n\n## [3.8.3] - 2017-04-05\n### Fixed\n- Should not allow numbers to begin and end with underscore, #335.\n\n\n## [3.8.2] - 2017-03-02\n### Fixed\n- Fix `!!float 123` (integers) parse, #333.\n- Don't allow leading zeros in floats (except 0, 0.xxx).\n- Allow positive exponent without sign in floats.\n\n\n## [3.8.1] - 2017-02-07\n### Changed\n- Maintenance: update browserified build.\n\n\n## [3.8.0] - 2017-02-07\n### Fixed\n- Fix reported position for `duplicated mapping key` errors.\n  Now points to block start instead of block end.\n  (#243, thanks to @shockey).\n\n\n## [3.7.0] - 2016-11-12\n### Added\n- Support polymorphism for tags (#300, thanks to @monken).\n\n### Fixed\n- Fix parsing of quotes followed by newlines (#304, thanks to @dplepage).\n\n\n## [3.6.1] - 2016-05-11\n### Fixed\n- Fix output cut on a pipe, #286.\n\n\n## [3.6.0] - 2016-04-16\n### Fixed\n- Dumper rewrite, fix multiple bugs with trailing `\\n`.\n  Big thanks to @aepsilon!\n- Loader: fix leading/trailing newlines in block scalars, @aepsilon.\n\n\n## [3.5.5] - 2016-03-17\n### Fixed\n- Date parse fix: don't allow dates with on digit in month and day, #268.\n\n\n## [3.5.4] - 2016-03-09\n### Added\n- `noCompatMode` for dumper, to disable quoting YAML 1.1 values.\n\n\n## [3.5.3] - 2016-02-11\n### Changed\n- Maintenance release.\n\n\n## [3.5.2] - 2016-01-11\n### Changed\n- Maintenance: missed comma in bower config.\n\n\n## [3.5.1] - 2016-01-11\n### Changed\n- Removed `inherit` dependency, #239.\n- Better browserify workaround for esprima load.\n- Demo rewrite.\n\n\n## [3.5.0] - 2016-01-10\n### Fixed\n- Dumper. Fold strings only, #217.\n- Dumper. `norefs` option, to clone linked objects, #229.\n- Loader. Throw a warning for duplicate keys, #166.\n- Improved browserify support (mark `esprima` & `Buffer` excluded).\n\n\n## [3.4.6] - 2015-11-26\n### Changed\n- Use standalone `inherit` to keep browserified files clear.\n\n\n## [3.4.5] - 2015-11-23\n### Added\n- Added `lineWidth` option to dumper.\n\n\n## [3.4.4] - 2015-11-21\n### Fixed\n- Fixed floats dump (missed dot for scientific format), #220.\n- Allow non-printable characters inside quoted scalars, #192.\n\n\n## [3.4.3] - 2015-10-10\n### Changed\n- Maintenance release - deps bump (esprima, argparse).\n\n\n## [3.4.2] - 2015-09-09\n### Fixed\n- Fixed serialization of duplicated entries in sequences, #205.\n  Thanks to @vogelsgesang.\n\n\n## [3.4.1] - 2015-09-05\n### Fixed\n- Fixed stacktrace handling in generated errors, for browsers (FF/IE).\n\n\n## [3.4.0] - 2015-08-23\n### Changed\n- Don't throw on warnings anymore. Use `onWarning` option to catch.\n- Throw error on unknown tags (was warning before).\n- Reworked internals of error class.\n\n### Fixed\n- Fixed multiline keys dump, #197. Thanks to @tcr.\n- Fixed heading line breaks in some scalars (regression).\n\n\n## [3.3.1] - 2015-05-13\n### Added\n- Added `.sortKeys` dumper option, thanks to @rjmunro.\n\n### Fixed\n- Fixed astral characters support, #191.\n\n\n## [3.3.0] - 2015-04-26\n### Changed\n- Significantly improved long strings formatting in dumper, thanks to @isaacs.\n- Strip BOM if exists.\n\n\n## [3.2.7] - 2015-02-19\n### Changed\n- Maintenance release.\n- Updated dependencies.\n- HISTORY.md -> CHANGELOG.md\n\n\n## [3.2.6] - 2015-02-07\n### Fixed\n- Fixed encoding of UTF-16 surrogate pairs. (e.g. \"\\U0001F431\" CAT FACE).\n- Fixed demo dates dump (#113, thanks to @Hypercubed).\n\n\n## [3.2.5] - 2014-12-28\n### Fixed\n- Fixed resolving of all built-in types on empty nodes.\n- Fixed invalid warning on empty lines within quoted scalars and flow collections.\n- Fixed bug: Tag on an empty node didn't resolve in some cases.\n\n\n## [3.2.4] - 2014-12-19\n### Fixed\n- Fixed resolving of !!null tag on an empty node.\n\n\n## [3.2.3] - 2014-11-08\n### Fixed\n- Implemented dumping of objects with circular and cross references.\n- Partially fixed aliasing of constructed objects. (see issue #141 for details)\n\n\n## [3.2.2] - 2014-09-07\n### Fixed\n- Fixed infinite loop on unindented block scalars.\n- Rewritten base64 encode/decode in binary type, to keep code licence clear.\n\n\n## [3.2.1] - 2014-08-24\n### Fixed\n- Nothig new. Just fix npm publish error.\n\n\n## [3.2.0] - 2014-08-24\n### Added\n- Added input piping support to CLI.\n\n### Fixed\n- Fixed typo, that could cause hand on initial indent (#139).\n\n\n## [3.1.0] - 2014-07-07\n### Changed\n- 1.5x-2x speed boost.\n- Removed deprecated `require('xxx.yml')` support.\n- Significant code cleanup and refactoring.\n- Internal API changed. If you used custom types - see updated examples.\n  Others are not affected.\n- Even if the input string has no trailing line break character,\n  it will be parsed as if it has one.\n- Added benchmark scripts.\n- Moved bower files to /dist folder\n- Bugfixes.\n\n\n## [3.0.2] - 2014-02-27\n### Fixed\n- Fixed bug: \"constructor\" string parsed as `null`.\n\n\n## [3.0.1] - 2013-12-22\n### Fixed\n- Fixed parsing of literal scalars. (issue #108)\n- Prevented adding unnecessary spaces in object dumps. (issue #68)\n- Fixed dumping of objects with very long (> 1024 in length) keys.\n\n\n## [3.0.0] - 2013-12-16\n### Changed\n- Refactored code. Changed API for custom types.\n- Removed output colors in CLI, dump json by default.\n- Removed big dependencies from browser version (esprima, buffer). Load `esprima` manually, if `!!js/function` needed. `!!bin` now returns Array in browser\n- AMD support.\n- Don't quote dumped strings because of `-` & `?` (if not first char).\n- __Deprecated__ loading yaml files via `require()`, as not recommended\n  behaviour for node.\n\n\n## [2.1.3] - 2013-10-16\n### Fixed\n- Fix wrong loading of empty block scalars.\n\n\n## [2.1.2] - 2013-10-07\n### Fixed\n- Fix unwanted line breaks in folded scalars.\n\n\n## [2.1.1] - 2013-10-02\n### Fixed\n- Dumper now respects deprecated booleans syntax from YAML 1.0/1.1\n- Fixed reader bug in JSON-like sequences/mappings.\n\n\n## [2.1.0] - 2013-06-05\n### Added\n- Add standard YAML schemas: Failsafe (`FAILSAFE_SCHEMA`),\n  JSON (`JSON_SCHEMA`) and Core (`CORE_SCHEMA`).\n- Add `skipInvalid` dumper option.\n\n### Changed\n- Rename `DEFAULT_SCHEMA` to `DEFAULT_FULL_SCHEMA`\n  and `SAFE_SCHEMA` to `DEFAULT_SAFE_SCHEMA`.\n- Use `safeLoad` for `require` extension.\n\n### Fixed\n- Bug fix: export `NIL` constant from the public interface.\n\n\n## [2.0.5] - 2013-04-26\n### Security\n- Close security issue in !!js/function constructor.\n  Big thanks to @nealpoole for security audit.\n\n\n## [2.0.4] - 2013-04-08\n### Changed\n- Updated .npmignore to reduce package size\n\n\n## [2.0.3] - 2013-02-26\n### Fixed\n- Fixed dumping of empty arrays ans objects. ([] and {} instead of null)\n\n\n## [2.0.2] - 2013-02-15\n### Fixed\n- Fixed input validation: tabs are printable characters.\n\n\n## [2.0.1] - 2013-02-09\n### Fixed\n- Fixed error, when options not passed to function cass\n\n\n## [2.0.0] - 2013-02-09\n### Changed\n- Full rewrite. New architecture. Fast one-stage parsing.\n- Changed custom types API.\n- Added YAML dumper.\n\n\n## [1.0.3] - 2012-11-05\n### Fixed\n- Fixed utf-8 files loading.\n\n\n## [1.0.2] - 2012-08-02\n### Fixed\n- Pull out hand-written shims. Use ES5-Shims for old browsers support. See #44.\n- Fix timstamps incorectly parsed in local time when no time part specified.\n\n\n## [1.0.1] - 2012-07-07\n### Fixed\n- Fixes `TypeError: 'undefined' is not an object` under Safari. Thanks Phuong.\n- Fix timestamps incorrectly parsed in local time. Thanks @caolan. Closes #46.\n\n\n## [1.0.0] - 2012-07-01\n### Changed\n- `y`, `yes`, `n`, `no`, `on`, `off` are not converted to Booleans anymore.\n  Fixes #42.\n- `require(filename)` now returns a single document and throws an Error if\n  file contains more than one document.\n- CLI was merged back from js-yaml.bin\n\n\n## [0.3.7] - 2012-02-28\n### Fixed\n- Fix export of `addConstructor()`. Closes #39.\n\n\n## [0.3.6] - 2012-02-22\n### Changed\n- Removed AMD parts - too buggy to use. Need help to rewrite from scratch\n\n### Fixed\n- Removed YUI compressor warning (renamed `double` variable). Closes #40.\n\n\n## [0.3.5] - 2012-01-10\n### Fixed\n- Workagound for .npmignore fuckup under windows. Thanks to airportyh.\n\n\n## [0.3.4] - 2011-12-24\n### Fixed\n- Fixes str[] for oldIEs support.\n- Adds better has change support for browserified demo.\n- improves compact output of Error. Closes #33.\n\n\n## [0.3.3] - 2011-12-20\n### Added\n- adds `compact` stringification of Errors.\n\n### Changed\n- jsyaml executable moved to separate module.\n\n\n## [0.3.2] - 2011-12-16\n### Added\n- Added jsyaml executable.\n- Added !!js/function support. Closes #12.\n\n### Fixed\n- Fixes ug with block style scalars. Closes #26.\n- All sources are passing JSLint now.\n- Fixes bug in Safari. Closes #28.\n- Fixes bug in Opers. Closes #29.\n- Improves browser support. Closes #20.\n\n\n## [0.3.1] - 2011-11-18\n### Added\n- Added AMD support for browserified version.\n- Added permalinks for online demo YAML snippets. Now we have YPaste service, lol.\n- Added !!js/regexp and !!js/undefined types. Partially solves #12.\n\n### Changed\n- Wrapped browserified js-yaml into closure.\n\n### Fixed\n- Fixed the resolvement of non-specific tags. Closes #17.\n- Fixed !!set mapping.\n- Fixed month parse in dates. Closes #19.\n\n\n## [0.3.0] - 2011-11-09\n### Added\n- Added browserified version. Closes #13.\n- Added live demo of browserified version.\n- Ported some of the PyYAML tests. See #14.\n\n### Fixed\n- Removed JS.Class dependency. Closes #3.\n- Fixed timestamp bug when fraction was given.\n\n\n## [0.2.2] - 2011-11-06\n### Fixed\n- Fixed crash on docs without ---. Closes #8.\n- Fixed multiline string parse\n- Fixed tests/comments for using array as key\n\n\n## [0.2.1] - 2011-11-02\n### Fixed\n- Fixed short file read (<4k). Closes #9.\n\n\n## [0.2.0] - 2011-11-02\n### Changed\n- First public release\n\n\n[3.14.1]: https://github.com/nodeca/js-yaml/compare/3.14.0...3.14.1\n[3.14.0]: https://github.com/nodeca/js-yaml/compare/3.13.1...3.14.0\n[3.13.1]: https://github.com/nodeca/js-yaml/compare/3.13.0...3.13.1\n[3.13.0]: https://github.com/nodeca/js-yaml/compare/3.12.2...3.13.0\n[3.12.2]: https://github.com/nodeca/js-yaml/compare/3.12.1...3.12.2\n[3.12.1]: https://github.com/nodeca/js-yaml/compare/3.12.0...3.12.1\n[3.12.0]: https://github.com/nodeca/js-yaml/compare/3.11.0...3.12.0\n[3.11.0]: https://github.com/nodeca/js-yaml/compare/3.10.0...3.11.0\n[3.10.0]: https://github.com/nodeca/js-yaml/compare/3.9.1...3.10.0\n[3.9.1]: https://github.com/nodeca/js-yaml/compare/3.9.0...3.9.1\n[3.9.0]: https://github.com/nodeca/js-yaml/compare/3.8.4...3.9.0\n[3.8.4]: https://github.com/nodeca/js-yaml/compare/3.8.3...3.8.4\n[3.8.3]: https://github.com/nodeca/js-yaml/compare/3.8.2...3.8.3\n[3.8.2]: https://github.com/nodeca/js-yaml/compare/3.8.1...3.8.2\n[3.8.1]: https://github.com/nodeca/js-yaml/compare/3.8.0...3.8.1\n[3.8.0]: https://github.com/nodeca/js-yaml/compare/3.7.0...3.8.0\n[3.7.0]: https://github.com/nodeca/js-yaml/compare/3.6.1...3.7.0\n[3.6.1]: https://github.com/nodeca/js-yaml/compare/3.6.0...3.6.1\n[3.6.0]: https://github.com/nodeca/js-yaml/compare/3.5.5...3.6.0\n[3.5.5]: https://github.com/nodeca/js-yaml/compare/3.5.4...3.5.5\n[3.5.4]: https://github.com/nodeca/js-yaml/compare/3.5.3...3.5.4\n[3.5.3]: https://github.com/nodeca/js-yaml/compare/3.5.2...3.5.3\n[3.5.2]: https://github.com/nodeca/js-yaml/compare/3.5.1...3.5.2\n[3.5.1]: https://github.com/nodeca/js-yaml/compare/3.5.0...3.5.1\n[3.5.0]: https://github.com/nodeca/js-yaml/compare/3.4.6...3.5.0\n[3.4.6]: https://github.com/nodeca/js-yaml/compare/3.4.5...3.4.6\n[3.4.5]: https://github.com/nodeca/js-yaml/compare/3.4.4...3.4.5\n[3.4.4]: https://github.com/nodeca/js-yaml/compare/3.4.3...3.4.4\n[3.4.3]: https://github.com/nodeca/js-yaml/compare/3.4.2...3.4.3\n[3.4.2]: https://github.com/nodeca/js-yaml/compare/3.4.1...3.4.2\n[3.4.1]: https://github.com/nodeca/js-yaml/compare/3.4.0...3.4.1\n[3.4.0]: https://github.com/nodeca/js-yaml/compare/3.3.1...3.4.0\n[3.3.1]: https://github.com/nodeca/js-yaml/compare/3.3.0...3.3.1\n[3.3.0]: https://github.com/nodeca/js-yaml/compare/3.2.7...3.3.0\n[3.2.7]: https://github.com/nodeca/js-yaml/compare/3.2.6...3.2.7\n[3.2.6]: https://github.com/nodeca/js-yaml/compare/3.2.5...3.2.6\n[3.2.5]: https://github.com/nodeca/js-yaml/compare/3.2.4...3.2.5\n[3.2.4]: https://github.com/nodeca/js-yaml/compare/3.2.3...3.2.4\n[3.2.3]: https://github.com/nodeca/js-yaml/compare/3.2.2...3.2.3\n[3.2.2]: https://github.com/nodeca/js-yaml/compare/3.2.1...3.2.2\n[3.2.1]: https://github.com/nodeca/js-yaml/compare/3.2.0...3.2.1\n[3.2.0]: https://github.com/nodeca/js-yaml/compare/3.1.0...3.2.0\n[3.1.0]: https://github.com/nodeca/js-yaml/compare/3.0.2...3.1.0\n[3.0.2]: https://github.com/nodeca/js-yaml/compare/3.0.1...3.0.2\n[3.0.1]: https://github.com/nodeca/js-yaml/compare/3.0.0...3.0.1\n[3.0.0]: https://github.com/nodeca/js-yaml/compare/2.1.3...3.0.0\n[2.1.3]: https://github.com/nodeca/js-yaml/compare/2.1.2...2.1.3\n[2.1.2]: https://github.com/nodeca/js-yaml/compare/2.1.1...2.1.2\n[2.1.1]: https://github.com/nodeca/js-yaml/compare/2.1.0...2.1.1\n[2.1.0]: https://github.com/nodeca/js-yaml/compare/2.0.5...2.1.0\n[2.0.5]: https://github.com/nodeca/js-yaml/compare/2.0.4...2.0.5\n[2.0.4]: https://github.com/nodeca/js-yaml/compare/2.0.3...2.0.4\n[2.0.3]: https://github.com/nodeca/js-yaml/compare/2.0.2...2.0.3\n[2.0.2]: https://github.com/nodeca/js-yaml/compare/2.0.1...2.0.2\n[2.0.1]: https://github.com/nodeca/js-yaml/compare/2.0.0...2.0.1\n[2.0.0]: https://github.com/nodeca/js-yaml/compare/1.0.3...2.0.0\n[1.0.3]: https://github.com/nodeca/js-yaml/compare/1.0.2...1.0.3\n[1.0.2]: https://github.com/nodeca/js-yaml/compare/1.0.1...1.0.2\n[1.0.1]: https://github.com/nodeca/js-yaml/compare/1.0.0...1.0.1\n[1.0.0]: https://github.com/nodeca/js-yaml/compare/0.3.7...1.0.0\n[0.3.7]: https://github.com/nodeca/js-yaml/compare/0.3.6...0.3.7\n[0.3.6]: https://github.com/nodeca/js-yaml/compare/0.3.5...0.3.6\n[0.3.5]: https://github.com/nodeca/js-yaml/compare/0.3.4...0.3.5\n[0.3.4]: https://github.com/nodeca/js-yaml/compare/0.3.3...0.3.4\n[0.3.3]: https://github.com/nodeca/js-yaml/compare/0.3.2...0.3.3\n[0.3.2]: https://github.com/nodeca/js-yaml/compare/0.3.1...0.3.2\n[0.3.1]: https://github.com/nodeca/js-yaml/compare/0.3.0...0.3.1\n[0.3.0]: https://github.com/nodeca/js-yaml/compare/0.2.2...0.3.0\n[0.2.2]: https://github.com/nodeca/js-yaml/compare/0.2.1...0.2.2\n[0.2.1]: https://github.com/nodeca/js-yaml/compare/0.2.0...0.2.1\n[0.2.0]: https://github.com/nodeca/js-yaml/releases/tag/0.2.0"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/js-yaml/README.md",
            "content": "JS-YAML - YAML 1.2 parser / writer for JavaScript\n=================================================\n\n[![Build Status](https://travis-ci.org/nodeca/js-yaml.svg?branch=master)](https://travis-ci.org/nodeca/js-yaml)\n[![NPM version](https://img.shields.io/npm/v/js-yaml.svg)](https://www.npmjs.org/package/js-yaml)\n\n__[Online Demo](http://nodeca.github.com/js-yaml/)__\n\n\nThis is an implementation of [YAML](http://yaml.org/), a human-friendly data\nserialization language. Started as [PyYAML](http://pyyaml.org/) port, it was\ncompletely rewritten from scratch. Now it's very fast, and supports 1.2 spec.\n\n\nInstallation\n------------\n\n### YAML module for node.js\n\n```\nnpm install js-yaml\n```\n\n\n### CLI executable\n\nIf you want to inspect your YAML files from CLI, install js-yaml globally:\n\n```\nnpm install -g js-yaml\n```\n\n#### Usage\n\n```\nusage: js-yaml [-h] [-v] [-c] [-t] file\n\nPositional arguments:\n  file           File with YAML document(s)\n\nOptional arguments:\n  -h, --help     Show this help message and exit.\n  -v, --version  Show program's version number and exit.\n  -c, --compact  Display errors in compact mode\n  -t, --trace    Show stack trace on error\n```\n\n\n### Bundled YAML library for browsers\n\n``` html\n<!-- esprima required only for !!js/function -->\n<script src=\"esprima.js\"></script>\n<script src=\"js-yaml.min.js\"></script>\n<script type=\"text/javascript\">\nvar doc = jsyaml.load('greeting: hello\\nname: world');\n</script>\n```\n\nBrowser support was done mostly for the online demo. If you find any errors - feel\nfree to send pull requests with fixes. Also note, that IE and other old browsers\nneeds [es5-shims](https://github.com/kriskowal/es5-shim) to operate.\n\nNotes:\n\n1. We have no resources to support browserified version. Don't expect it to be\n   well tested. Don't expect fast fixes if something goes wrong there.\n2. `!!js/function` in browser bundle will not work by default. If you really need\n   it - load `esprima` parser first (via amd or directly).\n3. `!!bin` in browser will return `Array`, because browsers do not support\n   node.js `Buffer` and adding Buffer shims is completely useless on practice.\n\n\nAPI\n---\n\nHere we cover the most 'useful' methods. If you need advanced details (creating\nyour own tags), see [wiki](https://github.com/nodeca/js-yaml/wiki) and\n[examples](https://github.com/nodeca/js-yaml/tree/master/examples) for more\ninfo.\n\n``` javascript\nconst yaml = require('js-yaml');\nconst fs   = require('fs');\n\n// Get document, or throw exception on error\ntry {\n  const doc = yaml.safeLoad(fs.readFileSync('/home/ixti/example.yml', 'utf8'));\n  console.log(doc);\n} catch (e) {\n  console.log(e);\n}\n```\n\n\n### safeLoad (string [ , options ])\n\n**Recommended loading way.** Parses `string` as single YAML document. Returns either a\nplain object, a string or `undefined`, or throws `YAMLException` on error. By default, does\nnot support regexps, functions and undefined. This method is safe for untrusted data.\n\noptions:\n\n- `filename` _(default: null)_ - string to be used as a file path in\n  error/warning messages.\n- `onWarning` _(default: null)_ - function to call on warning messages.\n  Loader will call this function with an instance of `YAMLException` for each warning.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ - specifies a schema to use.\n  - `FAILSAFE_SCHEMA` - only strings, arrays and plain objects:\n    http://www.yaml.org/spec/1.2/spec.html#id2802346\n  - `JSON_SCHEMA` - all JSON-supported types:\n    http://www.yaml.org/spec/1.2/spec.html#id2803231\n  - `CORE_SCHEMA` - same as `JSON_SCHEMA`:\n    http://www.yaml.org/spec/1.2/spec.html#id2804923\n  - `DEFAULT_SAFE_SCHEMA` - all supported YAML types, without unsafe ones\n    (`!!js/undefined`, `!!js/regexp` and `!!js/function`):\n    http://yaml.org/type/\n  - `DEFAULT_FULL_SCHEMA` - all supported YAML types.\n- `json` _(default: false)_ - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.\n\nNOTE: This function **does not** understand multi-document sources, it throws\nexception on those.\n\nNOTE: JS-YAML **does not** support schema-specific tag resolution restrictions.\nSo, the JSON schema is not as strictly defined in the YAML specification.\nIt allows numbers in any notation, use `Null` and `NULL` as `null`, etc.\nThe core schema also has no such restrictions. It allows binary notation for integers.\n\n\n### load (string [ , options ])\n\n**Use with care with untrusted sources**. The same as `safeLoad()` but uses\n`DEFAULT_FULL_SCHEMA` by default - adds some JavaScript-specific types:\n`!!js/function`, `!!js/regexp` and `!!js/undefined`. For untrusted sources, you\nmust additionally validate object structure to avoid injections:\n\n``` javascript\nconst untrusted_code = '\"toString\": !<tag:yaml.org,2002:js/function> \"function (){very_evil_thing();}\"';\n\n// I'm just converting that string, what could possibly go wrong?\nrequire('js-yaml').load(untrusted_code) + ''\n```\n\n\n### safeLoadAll (string [, iterator] [, options ])\n\nSame as `safeLoad()`, but understands multi-document sources. Applies\n`iterator` to each document if specified, or returns array of documents.\n\n``` javascript\nconst yaml = require('js-yaml');\n\nyaml.safeLoadAll(data, function (doc) {\n  console.log(doc);\n});\n```\n\n\n### loadAll (string [, iterator] [ , options ])\n\nSame as `safeLoadAll()` but uses `DEFAULT_FULL_SCHEMA` by default.\n\n\n### safeDump (object [ , options ])\n\nSerializes `object` as a YAML document. Uses `DEFAULT_SAFE_SCHEMA`, so it will\nthrow an exception if you try to dump regexps or functions. However, you can\ndisable exceptions by setting the `skipInvalid` option to `true`.\n\noptions:\n\n- `indent` _(default: 2)_ - indentation width to use (in spaces).\n- `noArrayIndent` _(default: false)_ - when true, will not add an indentation level to array elements\n- `skipInvalid` _(default: false)_ - do not throw on invalid types (like function\n  in the safe schema) and skip pairs and single values with such types.\n- `flowLevel` (default: -1) - specifies level of nesting, when to switch from\n  block to flow style for collections. -1 means block style everwhere\n- `styles` - \"tag\" => \"style\" map. Each tag may have own set of styles.\n- `schema` _(default: `DEFAULT_SAFE_SCHEMA`)_ specifies a schema to use.\n- `sortKeys` _(default: `false`)_ - if `true`, sort keys when dumping YAML. If a\n  function, use the function to sort the keys.\n- `lineWidth` _(default: `80`)_ - set max line width.\n- `noRefs` _(default: `false`)_ - if `true`, don't convert duplicate objects into references\n- `noCompatMode` _(default: `false`)_ - if `true` don't try to be compatible with older\n  yaml versions. Currently: don't quote \"yes\", \"no\" and so on, as required for YAML 1.1\n- `condenseFlow` _(default: `false`)_ - if `true` flow sequences will be condensed, omitting the space between `a, b`. Eg. `'[a,b]'`, and omitting the space between `key: value` and quoting the key. Eg. `'{\"a\":b}'` Can be useful when using yaml for pretty URL query params as spaces are %-encoded.\n\nThe following table show availlable styles (e.g. \"canonical\",\n\"binary\"...) available for each tag (.e.g. !!null, !!int ...). Yaml\noutput is shown on the right side after `=>` (default setting) or `->`:\n\n``` none\n!!null\n  \"canonical\"   -> \"~\"\n  \"lowercase\"   => \"null\"\n  \"uppercase\"   -> \"NULL\"\n  \"camelcase\"   -> \"Null\"\n\n!!int\n  \"binary\"      -> \"0b1\", \"0b101010\", \"0b1110001111010\"\n  \"octal\"       -> \"01\", \"052\", \"016172\"\n  \"decimal\"     => \"1\", \"42\", \"7290\"\n  \"hexadecimal\" -> \"0x1\", \"0x2A\", \"0x1C7A\"\n\n!!bool\n  \"lowercase\"   => \"true\", \"false\"\n  \"uppercase\"   -> \"TRUE\", \"FALSE\"\n  \"camelcase\"   -> \"True\", \"False\"\n\n!!float\n  \"lowercase\"   => \".nan\", '.inf'\n  \"uppercase\"   -> \".NAN\", '.INF'\n  \"camelcase\"   -> \".NaN\", '.Inf'\n```\n\nExample:\n\n``` javascript\nsafeDump (object, {\n  'styles': {\n    '!!null': 'canonical' // dump null as ~\n  },\n  'sortKeys': true        // sort object keys\n});\n```\n\n### dump (object [ , options ])\n\nSame as `safeDump()` but without limits (uses `DEFAULT_FULL_SCHEMA` by default).\n\n\nSupported YAML types\n--------------------\n\nThe list of standard YAML tags and corresponding JavaScipt types. See also\n[YAML tag discussion](http://pyyaml.org/wiki/YAMLTagDiscussion) and\n[YAML types repository](http://yaml.org/type/).\n\n```\n!!null ''                   # null\n!!bool 'yes'                # bool\n!!int '3...'                # number\n!!float '3.14...'           # number\n!!binary '...base64...'     # buffer\n!!timestamp 'YYYY-...'      # date\n!!omap [ ... ]              # array of key-value pairs\n!!pairs [ ... ]             # array or array pairs\n!!set { ... }               # array of objects with given keys and null values\n!!str '...'                 # string\n!!seq [ ... ]               # array\n!!map { ... }               # object\n```\n\n**JavaScript-specific tags**\n\n```\n!!js/regexp /pattern/gim            # RegExp\n!!js/undefined ''                   # Undefined\n!!js/function 'function () {...}'   # Function\n```\n\nCaveats\n-------\n\nNote, that you use arrays or objects as key in JS-YAML. JS does not allow objects\nor arrays as keys, and stringifies (by calling `toString()` method) them at the\nmoment of adding them.\n\n``` yaml\n---\n? [ foo, bar ]\n: - baz\n? { foo: bar }\n: - baz\n  - baz\n```\n\n``` javascript\n{ \"foo,bar\": [\"baz\"], \"[object Object]\": [\"baz\", \"baz\"] }\n```\n\nAlso, reading of properties on implicit block mapping keys is not supported yet.\nSo, the following YAML document cannot be loaded.\n\n``` yaml\n&anchor foo:\n  foo: bar\n  *anchor: duplicate key\n  baz: bat\n  *anchor: duplicate key\n```\n\n\njs-yaml for enterprise\n----------------------\n\nAvailable as part of the Tidelift Subscription\n\nThe maintainers of js-yaml and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. [Learn more.](https://tidelift.com/subscription/pkg/npm-js-yaml?utm_source=npm-js-yaml&utm_medium=referral&utm_campaign=enterprise&utm_term=repo)"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/kind-of/CHANGELOG.md",
            "content": "# Release history\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](http://keepachangelog.com/en/1.0.0/)\nand this project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n<details>\n  <summary><strong>Guiding Principles</strong></summary>\n\n- Changelogs are for humans, not machines.\n- There should be an entry for every single version.\n- The same types of changes should be grouped.\n- Versions and sections should be linkable.\n- The latest version comes first.\n- The release date of each versions is displayed.\n- Mention whether you follow Semantic Versioning.\n\n</details>\n\n<details>\n  <summary><strong>Types of changes</strong></summary>\n\nChangelog entries are classified using the following labels _(from [keep-a-changelog](http://keepachangelog.com/)_):\n\n- `Added` for new features.\n- `Changed` for changes in existing functionality.\n- `Deprecated` for soon-to-be removed features.\n- `Removed` for now removed features.\n- `Fixed` for any bug fixes.\n- `Security` in case of vulnerabilities.\n\n</details>\n\n## [6.0.3] - 2020-01-16\n\n- Merge pull request #31 for issue #30\n\n## [6.0.0] - 2017-10-13\n\n- refactor code to be more performant\n- refactor benchmarks\n\n## [5.1.0] - 2017-10-13\n\n**Added**\n\n- Merge pull request #15 from aretecode/patch-1\n- adds support and tests for string & array iterators\n\n**Changed**\n\n- updates benchmarks\n\n## [5.0.2] - 2017-08-02\n\n- Merge pull request #14 from struct78/master\n- Added `undefined` check\n\n## [5.0.0] - 2017-06-21\n\n- Merge pull request #12 from aretecode/iterator\n- Set Iterator + Map Iterator\n- streamline `isbuffer`, minor edits\n\n## [4.0.0] - 2017-05-19\n\n- Merge pull request #8 from tunnckoCore/master\n- update deps\n\n## [3.2.2] - 2017-05-16\n\n- fix version\n\n## [3.2.1] - 2017-05-16\n\n- add browserify\n\n## [3.2.0] - 2017-04-25\n\n- Merge pull request #10 from ksheedlo/unrequire-buffer\n- add `promise` support and tests\n- Remove unnecessary `Buffer` check\n\n## [3.1.0] - 2016-12-07\n\n- Merge pull request #7 from laggingreflex/err\n- add support for `error` and tests\n- run update\n\n## [3.0.4] - 2016-07-29\n\n- move tests\n- run update\n\n## [3.0.3] - 2016-05-03\n\n- fix prepublish script\n- remove unused dep\n\n## [3.0.0] - 2015-11-17\n\n- add typed array support\n- Merge pull request #5 from miguelmota/typed-arrays\n- adds new tests\n\n## [2.0.1] - 2015-08-21\n\n- use `is-buffer` module\n\n## [2.0.0] - 2015-05-31\n\n- Create fallback for `Array.isArray` if used as a browser package\n- Merge pull request #2 from dtothefp/patch-1\n- Merge pull request #3 from pdehaan/patch-1\n- Merge branch 'master' of https://github.com/chorks/kind-of into chorks-master\n- optimizations, mostly date and regex\n\n## [1.1.0] - 2015-02-09\n\n- adds `buffer` support\n- adds tests for `buffer`\n\n## [1.0.0] - 2015-01-19\n\n- update benchmarks\n- optimizations based on benchmarks\n\n## [0.1.2] - 2014-10-26\n\n- return `typeof` value if it's not an object. very slight speed improvement\n- use `.slice`\n- adds benchmarks\n\n## [0.1.0] - 2014-9-26\n\n- first commit\n\n[6.0.0]: https://github.com/jonschlinkert/kind-of/compare/5.1.0...6.0.0\n[5.1.0]: https://github.com/jonschlinkert/kind-of/compare/5.0.2...5.1.0\n[5.0.2]: https://github.com/jonschlinkert/kind-of/compare/5.0.1...5.0.2\n[5.0.1]: https://github.com/jonschlinkert/kind-of/compare/5.0.0...5.0.1\n[5.0.0]: https://github.com/jonschlinkert/kind-of/compare/4.0.0...5.0.0\n[4.0.0]: https://github.com/jonschlinkert/kind-of/compare/3.2.2...4.0.0\n[3.2.2]: https://github.com/jonschlinkert/kind-of/compare/3.2.1...3.2.2\n[3.2.1]: https://github.com/jonschlinkert/kind-of/compare/3.2.0...3.2.1\n[3.2.0]: https://github.com/jonschlinkert/kind-of/compare/3.1.0...3.2.0\n[3.1.0]: https://github.com/jonschlinkert/kind-of/compare/3.0.4...3.1.0\n[3.0.4]: https://github.com/jonschlinkert/kind-of/compare/3.0.3...3.0.4\n[3.0.3]: https://github.com/jonschlinkert/kind-of/compare/3.0.0...3.0.3\n[3.0.0]: https://github.com/jonschlinkert/kind-of/compare/2.0.1...3.0.0\n[2.0.1]: https://github.com/jonschlinkert/kind-of/compare/2.0.0...2.0.1\n[2.0.0]: https://github.com/jonschlinkert/kind-of/compare/1.1.0...2.0.0\n[1.1.0]: https://github.com/jonschlinkert/kind-of/compare/1.0.0...1.1.0\n[1.0.0]: https://github.com/jonschlinkert/kind-of/compare/0.1.2...1.0.0\n[0.1.2]: https://github.com/jonschlinkert/kind-of/compare/0.1.0...0.1.2\n[0.1.0]: https://github.com/jonschlinkert/kind-of/commit/2fae09b0b19b1aadb558e9be39f0c3ef6034eb87\n\n[Unreleased]: https://github.com/jonschlinkert/kind-of/compare/0.1.2...HEAD\n[keep-a-changelog]: https://github.com/olivierlacan/keep-a-changelog"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/kind-of/README.md",
            "content": "# kind-of [![NPM version](https://img.shields.io/npm/v/kind-of.svg?style=flat)](https://www.npmjs.com/package/kind-of) [![NPM monthly downloads](https://img.shields.io/npm/dm/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![NPM total downloads](https://img.shields.io/npm/dt/kind-of.svg?style=flat)](https://npmjs.org/package/kind-of) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/kind-of.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/kind-of)\n\n> Get the native type of a value.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save kind-of\n```\n\nInstall with [bower](https://bower.io/)\n\n```sh\n$ bower install kind-of --save\n```\n\n## Why use this?\n\n1. [it's fast](#benchmarks) | [optimizations](#optimizations)\n2. [better type checking](#better-type-checking)\n\n## Usage\n\n> es5, es6, and browser ready\n\n```js\nvar kindOf = require('kind-of');\n\nkindOf(undefined);\n//=> 'undefined'\n\nkindOf(null);\n//=> 'null'\n\nkindOf(true);\n//=> 'boolean'\n\nkindOf(false);\n//=> 'boolean'\n\nkindOf(new Buffer(''));\n//=> 'buffer'\n\nkindOf(42);\n//=> 'number'\n\nkindOf('str');\n//=> 'string'\n\nkindOf(arguments);\n//=> 'arguments'\n\nkindOf({});\n//=> 'object'\n\nkindOf(Object.create(null));\n//=> 'object'\n\nkindOf(new Test());\n//=> 'object'\n\nkindOf(new Date());\n//=> 'date'\n\nkindOf([1, 2, 3]);\n//=> 'array'\n\nkindOf(/foo/);\n//=> 'regexp'\n\nkindOf(new RegExp('foo'));\n//=> 'regexp'\n\nkindOf(new Error('error'));\n//=> 'error'\n\nkindOf(function () {});\n//=> 'function'\n\nkindOf(function * () {});\n//=> 'generatorfunction'\n\nkindOf(Symbol('str'));\n//=> 'symbol'\n\nkindOf(new Map());\n//=> 'map'\n\nkindOf(new WeakMap());\n//=> 'weakmap'\n\nkindOf(new Set());\n//=> 'set'\n\nkindOf(new WeakSet());\n//=> 'weakset'\n\nkindOf(new Int8Array());\n//=> 'int8array'\n\nkindOf(new Uint8Array());\n//=> 'uint8array'\n\nkindOf(new Uint8ClampedArray());\n//=> 'uint8clampedarray'\n\nkindOf(new Int16Array());\n//=> 'int16array'\n\nkindOf(new Uint16Array());\n//=> 'uint16array'\n\nkindOf(new Int32Array());\n//=> 'int32array'\n\nkindOf(new Uint32Array());\n//=> 'uint32array'\n\nkindOf(new Float32Array());\n//=> 'float32array'\n\nkindOf(new Float64Array());\n//=> 'float64array'\n```\n\n## Benchmarks\n\nBenchmarked against [typeof](http://github.com/CodingFu/typeof) and [type-of](https://github.com/ForbesLindesay/type-of).\n\n```bash\n# arguments (32 bytes)\n  kind-of x 17,024,098 ops/sec Â±1.90% (86 runs sampled)\n  lib-type-of x 11,926,235 ops/sec Â±1.34% (83 runs sampled)\n  lib-typeof x 9,245,257 ops/sec Â±1.22% (87 runs sampled)\n\n  fastest is kind-of (by 161% avg)\n\n# array (22 bytes)\n  kind-of x 17,196,492 ops/sec Â±1.07% (88 runs sampled)\n  lib-type-of x 8,838,283 ops/sec Â±1.02% (87 runs sampled)\n  lib-typeof x 8,677,848 ops/sec Â±0.87% (87 runs sampled)\n\n  fastest is kind-of (by 196% avg)\n\n# boolean (24 bytes)\n  kind-of x 16,841,600 ops/sec Â±1.10% (86 runs sampled)\n  lib-type-of x 8,096,787 ops/sec Â±0.95% (87 runs sampled)\n  lib-typeof x 8,423,345 ops/sec Â±1.15% (86 runs sampled)\n\n  fastest is kind-of (by 204% avg)\n\n# buffer (38 bytes)\n  kind-of x 14,848,060 ops/sec Â±1.05% (86 runs sampled)\n  lib-type-of x 3,671,577 ops/sec Â±1.49% (87 runs sampled)\n  lib-typeof x 8,360,236 ops/sec Â±1.24% (86 runs sampled)\n\n  fastest is kind-of (by 247% avg)\n\n# date (30 bytes)\n  kind-of x 16,067,761 ops/sec Â±1.58% (86 runs sampled)\n  lib-type-of x 8,954,436 ops/sec Â±1.40% (87 runs sampled)\n  lib-typeof x 8,488,307 ops/sec Â±1.51% (84 runs sampled)\n\n  fastest is kind-of (by 184% avg)\n\n# error (36 bytes)\n  kind-of x 9,634,090 ops/sec Â±1.12% (89 runs sampled)\n  lib-type-of x 7,735,624 ops/sec Â±1.32% (86 runs sampled)\n  lib-typeof x 7,442,160 ops/sec Â±1.11% (90 runs sampled)\n\n  fastest is kind-of (by 127% avg)\n\n# function (34 bytes)\n  kind-of x 10,031,494 ops/sec Â±1.27% (86 runs sampled)\n  lib-type-of x 9,502,757 ops/sec Â±1.17% (89 runs sampled)\n  lib-typeof x 8,278,985 ops/sec Â±1.08% (88 runs sampled)\n\n  fastest is kind-of (by 113% avg)\n\n# null (24 bytes)\n  kind-of x 18,159,808 ops/sec Â±1.92% (86 runs sampled)\n  lib-type-of x 12,927,635 ops/sec Â±1.01% (88 runs sampled)\n  lib-typeof x 7,958,234 ops/sec Â±1.21% (89 runs sampled)\n\n  fastest is kind-of (by 174% avg)\n\n# number (22 bytes)\n  kind-of x 17,846,779 ops/sec Â±0.91% (85 runs sampled)\n  lib-type-of x 3,316,636 ops/sec Â±1.19% (86 runs sampled)\n  lib-typeof x 2,329,477 ops/sec Â±2.21% (85 runs sampled)\n\n  fastest is kind-of (by 632% avg)\n\n# object-plain (47 bytes)\n  kind-of x 7,085,155 ops/sec Â±1.05% (88 runs sampled)\n  lib-type-of x 8,870,930 ops/sec Â±1.06% (83 runs sampled)\n  lib-typeof x 8,716,024 ops/sec Â±1.05% (87 runs sampled)\n\n  fastest is lib-type-of (by 112% avg)\n\n# regex (25 bytes)\n  kind-of x 14,196,052 ops/sec Â±1.65% (84 runs sampled)\n  lib-type-of x 9,554,164 ops/sec Â±1.25% (88 runs sampled)\n  lib-typeof x 8,359,691 ops/sec Â±1.07% (87 runs sampled)\n\n  fastest is kind-of (by 158% avg)\n\n# string (33 bytes)\n  kind-of x 16,131,428 ops/sec Â±1.41% (85 runs sampled)\n  lib-type-of x 7,273,172 ops/sec Â±1.05% (87 runs sampled)\n  lib-typeof x 7,382,635 ops/sec Â±1.17% (85 runs sampled)\n\n  fastest is kind-of (by 220% avg)\n\n# symbol (34 bytes)\n  kind-of x 17,011,537 ops/sec Â±1.24% (86 runs sampled)\n  lib-type-of x 3,492,454 ops/sec Â±1.23% (89 runs sampled)\n  lib-typeof x 7,471,235 ops/sec Â±2.48% (87 runs sampled)\n\n  fastest is kind-of (by 310% avg)\n\n# template-strings (36 bytes)\n  kind-of x 15,434,250 ops/sec Â±1.46% (83 runs sampled)\n  lib-type-of x 7,157,907 ops/sec Â±0.97% (87 runs sampled)\n  lib-typeof x 7,517,986 ops/sec Â±0.92% (86 runs sampled)\n\n  fastest is kind-of (by 210% avg)\n\n# undefined (29 bytes)\n  kind-of x 19,167,115 ops/sec Â±1.71% (87 runs sampled)\n  lib-type-of x 15,477,740 ops/sec Â±1.63% (85 runs sampled)\n  lib-typeof x 19,075,495 ops/sec Â±1.17% (83 runs sampled)\n\n  fastest is lib-typeof,kind-of\n\n```\n\n## Optimizations\n\nIn 7 out of 8 cases, this library is 2x-10x faster than other top libraries included in the benchmarks. There are a few things that lead to this performance advantage, none of them hard and fast rules, but all of them simple and repeatable in almost any code library:\n\n1. Optimize around the fastest and most common use cases first. Of course, this will change from project-to-project, but I took some time to understand how and why `typeof` checks were being used in my own libraries and other libraries I use a lot.\n2. Optimize around bottlenecks - In other words, the order in which conditionals are implemented is significant, because each check is only as fast as the failing checks that came before it. Here, the biggest bottleneck by far is checking for plain objects (an object that was created by the `Object` constructor). I opted to make this check happen by process of elimination rather than brute force up front (e.g. by using something like `val.constructor.name`), so that every other type check would not be penalized it.\n3. Don't do uneccessary processing - why do `.slice(8, -1).toLowerCase();` just to get the word `regex`? It's much faster to do `if (type === '[object RegExp]') return 'regex'`\n4. There is no reason to make the code in a microlib as terse as possible, just to win points for making it shorter. It's always better to favor performant code over terse code. You will always only be using a single `require()` statement to use the library anyway, regardless of how the code is written.\n\n## Better type checking\n\nkind-of seems to be more consistently \"correct\" than other type checking libs I've looked at. For example, here are some differing results from other popular libs:\n\n### [typeof](https://github.com/CodingFu/typeof) lib\n\nIncorrectly identifies instances of custom constructors (pretty common):\n\n```js\nvar typeOf = require('typeof');\nfunction Test() {}\nconsole.log(typeOf(new Test()));\n//=> 'test'\n```\n\nReturns `object` instead of `arguments`:\n\n```js\nfunction foo() {\n  console.log(typeOf(arguments)) //=> 'object'\n}\nfoo();\n```\n\n### [type-of](https://github.com/ForbesLindesay/type-of) lib\n\nIncorrectly returns `object` for generator functions, buffers, `Map`, `Set`, `WeakMap` and `WeakSet`:\n\n```js\nfunction * foo() {}\nconsole.log(typeOf(foo));\n//=> 'object'\nconsole.log(typeOf(new Buffer('')));\n//=> 'object'\nconsole.log(typeOf(new Map()));\n//=> 'object'\nconsole.log(typeOf(new Set()));\n//=> 'object'\nconsole.log(typeOf(new WeakMap()));\n//=> 'object'\nconsole.log(typeOf(new WeakSet()));\n//=> 'object'\n```\n\n## About\n\n<details>\n<summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n</details>\n\n<details>\n<summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n<summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects:\n\n* [is-glob](https://www.npmjs.com/package/is-glob): Returns `true` if the given string looks like a glob pattern or an extglob patternâ€¦ [more](https://github.com/micromatch/is-glob) | [homepage](https://github.com/micromatch/is-glob \"Returns `true` if the given string looks like a glob pattern or an extglob pattern. This makes it easy to create code that only uses external modules like node-glob when necessary, resulting in much faster code execution and initialization time, and a bet\")\n* [is-number](https://www.npmjs.com/package/is-number): Returns true if a number or string value is a finite number. Useful for regexâ€¦ [more](https://github.com/jonschlinkert/is-number) | [homepage](https://github.com/jonschlinkert/is-number \"Returns true if a number or string value is a finite number. Useful for regex matches, parsing, user input, etc.\")\n* [is-primitive](https://www.npmjs.com/package/is-primitive): Returns `true` if the value is a primitive.  | [homepage](https://github.com/jonschlinkert/is-primitive \"Returns `true` if the value is a primitive. \")\n\n### Contributors\n\n| **Commits** | **Contributor** |  \n| --- | --- |  \n| 102 | [jonschlinkert](https://github.com/jonschlinkert) |  \n| 3   | [aretecode](https://github.com/aretecode) |  \n| 2   | [miguelmota](https://github.com/miguelmota) |  \n| 1   | [doowb](https://github.com/doowb) |  \n| 1   | [dtothefp](https://github.com/dtothefp) |  \n| 1   | [ianstormtaylor](https://github.com/ianstormtaylor) |  \n| 1   | [ksheedlo](https://github.com/ksheedlo) |  \n| 1   | [pdehaan](https://github.com/pdehaan) |  \n| 1   | [laggingreflex](https://github.com/laggingreflex) |  \n| 1   | [tunnckoCore](https://github.com/tunnckoCore) |  \n| 1   | [xiaofen9](https://github.com/xiaofen9) |  \n\n### Author\n\n**Jon Schlinkert**\n\n* [GitHub Profile](https://github.com/jonschlinkert)\n* [Twitter Profile](https://twitter.com/jonschlinkert)\n* [LinkedIn Profile](https://linkedin.com/in/jonschlinkert)\n\n### License\n\nCopyright Â© 2020, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.8.0, on January 16, 2020._"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/minimatch/README.md",
            "content": "# minimatch\n\nA minimal matching utility.\n\n[![Build Status](https://secure.travis-ci.org/isaacs/minimatch.svg)](http://travis-ci.org/isaacs/minimatch)\n\n\nThis is the matching library used internally by npm.\n\nIt works by converting glob expressions into JavaScript `RegExp`\nobjects.\n\n## Usage\n\n```javascript\nvar minimatch = require(\"minimatch\")\n\nminimatch(\"bar.foo\", \"*.foo\") // true!\nminimatch(\"bar.foo\", \"*.bar\") // false!\nminimatch(\"bar.foo\", \"*.+(bar|foo)\", { debug: true }) // true, and noisy!\n```\n\n## Features\n\nSupports these glob features:\n\n* Brace Expansion\n* Extended glob matching\n* \"Globstar\" `**` matching\n\nSee:\n\n* `man sh`\n* `man bash`\n* `man 3 fnmatch`\n* `man 5 gitignore`\n\n## Minimatch Class\n\nCreate a minimatch object by instantiating the `minimatch.Minimatch` class.\n\n```javascript\nvar Minimatch = require(\"minimatch\").Minimatch\nvar mm = new Minimatch(pattern, options)\n```\n\n### Properties\n\n* `pattern` The original pattern the minimatch object represents.\n* `options` The options supplied to the constructor.\n* `set` A 2-dimensional array of regexp or string expressions.\n  Each row in the\n  array corresponds to a brace-expanded pattern.  Each item in the row\n  corresponds to a single path-part.  For example, the pattern\n  `{a,b/c}/d` would expand to a set of patterns like:\n\n        [ [ a, d ]\n        , [ b, c, d ] ]\n\n    If a portion of the pattern doesn't have any \"magic\" in it\n    (that is, it's something like `\"foo\"` rather than `fo*o?`), then it\n    will be left as a string rather than converted to a regular\n    expression.\n\n* `regexp` Created by the `makeRe` method.  A single regular expression\n  expressing the entire pattern.  This is useful in cases where you wish\n  to use the pattern somewhat like `fnmatch(3)` with `FNM_PATH` enabled.\n* `negate` True if the pattern is negated.\n* `comment` True if the pattern is a comment.\n* `empty` True if the pattern is `\"\"`.\n\n### Methods\n\n* `makeRe` Generate the `regexp` member if necessary, and return it.\n  Will return `false` if the pattern is invalid.\n* `match(fname)` Return true if the filename matches the pattern, or\n  false otherwise.\n* `matchOne(fileArray, patternArray, partial)` Take a `/`-split\n  filename, and match it against a single row in the `regExpSet`.  This\n  method is mainly for internal use, but is exposed so that it can be\n  used by a glob-walker that needs to avoid excessive filesystem calls.\n\nAll other methods are internal, and will be called as necessary.\n\n### minimatch(path, pattern, options)\n\nMain export.  Tests a path against the pattern using the options.\n\n```javascript\nvar isJS = minimatch(file, \"*.js\", { matchBase: true })\n```\n\n### minimatch.filter(pattern, options)\n\nReturns a function that tests its\nsupplied argument, suitable for use with `Array.filter`.  Example:\n\n```javascript\nvar javascripts = fileList.filter(minimatch.filter(\"*.js\", {matchBase: true}))\n```\n\n### minimatch.match(list, pattern, options)\n\nMatch against the list of\nfiles, in the style of fnmatch or glob.  If nothing is matched, and\noptions.nonull is set, then return a list containing the pattern itself.\n\n```javascript\nvar javascripts = minimatch.match(fileList, \"*.js\", {matchBase: true}))\n```\n\n### minimatch.makeRe(pattern, options)\n\nMake a regular expression object from the pattern.\n\n## Options\n\nAll options are `false` by default.\n\n### debug\n\nDump a ton of stuff to stderr.\n\n### nobrace\n\nDo not expand `{a,b}` and `{1..3}` brace sets.\n\n### noglobstar\n\nDisable `**` matching against multiple folder names.\n\n### dot\n\nAllow patterns to match filenames starting with a period, even if\nthe pattern does not explicitly have a period in that spot.\n\nNote that by default, `a/**/b` will **not** match `a/.d/b`, unless `dot`\nis set.\n\n### noext\n\nDisable \"extglob\" style patterns like `+(a|b)`.\n\n### nocase\n\nPerform a case-insensitive match.\n\n### nonull\n\nWhen a match is not found by `minimatch.match`, return a list containing\nthe pattern itself if this option is set.  When not set, an empty list\nis returned if there are no matches.\n\n### matchBase\n\nIf set, then patterns without slashes will be matched\nagainst the basename of the path if it contains slashes.  For example,\n`a?b` would match the path `/xyz/123/acb`, but not `/xyz/acb/123`.\n\n### nocomment\n\nSuppress the behavior of treating `#` at the start of a pattern as a\ncomment.\n\n### nonegate\n\nSuppress the behavior of treating a leading `!` character as negation.\n\n### flipNegate\n\nReturns from negate expressions the same as if they were not negated.\n(Ie, true on a hit, false on a miss.)\n\n\n## Comparisons to other fnmatch/glob implementations\n\nWhile strict compliance with the existing standards is a worthwhile\ngoal, some discrepancies exist between minimatch and other\nimplementations, and are intentional.\n\nIf the pattern starts with a `!` character, then it is negated.  Set the\n`nonegate` flag to suppress this behavior, and treat leading `!`\ncharacters normally.  This is perhaps relevant if you wish to start the\npattern with a negative extglob pattern like `!(a|B)`.  Multiple `!`\ncharacters at the start of a pattern will negate the pattern multiple\ntimes.\n\nIf a pattern starts with `#`, then it is treated as a comment, and\nwill not match anything.  Use `\\#` to match a literal `#` at the\nstart of a line, or set the `nocomment` flag to suppress this behavior.\n\nThe double-star character `**` is supported by default, unless the\n`noglobstar` flag is set.  This is supported in the manner of bsdglob\nand bash 4.1, where `**` only has special significance if it is the only\nthing in a path part.  That is, `a/**/b` will match `a/x/y/b`, but\n`a/**b` will not.\n\nIf an escaped pattern has no matches, and the `nonull` flag is set,\nthen minimatch.match returns the pattern as-provided, rather than\ninterpreting the character escapes.  For example,\n`minimatch.match([], \"\\\\*a\\\\?\")` will return `\"\\\\*a\\\\?\"` rather than\n`\"*a?\"`.  This is akin to setting the `nullglob` option in bash, except\nthat it does not resolve escaped pattern characters.\n\nIf brace expansion is not disabled, then it is performed before any\nother interpretation of the glob pattern.  Thus, a pattern like\n`+(a|{b),c)}`, which would not be valid in bash or zsh, is expanded\n**first** into the set of `+(a|b)` and `+(a|c)`, and those patterns are\nchecked for validity.  Since those two are valid, matching proceeds."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/recursive-readdir/CHANGELOG.md",
            "content": "v2.1.0 - Mon, 19 Sep 2016 21:55:22 GMT\n--------------------------------------\n\n- \n\n\nv2.0.0 - Wed, 06 Apr 2016 04:31:02 GMT\n--------------------------------------\n\n- \n\n\nv1.3.0 - Wed, 14 Oct 2015 14:35:55 GMT\n--------------------------------------\n\n- [45abf8fde380d7b1f5dc0e798d435ed50b834d9c](../../commit/45abf8fde380d7b1f5dc0e798d435ed50b834d9c) [added] added custom matcher function to determine whether to ignore a file\n- [eebc91c67abce413d6213e8f389ba4e0d32ffb63](../../commit/eebc91c67abce413d6213e8f389ba4e0d32ffb63) [fixed] allow ignoring directories\n\nv1.2.1 - Wed, 14 Jan 2015 16:49:55 GMT\n--------------------------------------\n\n-"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/recursive-readdir/README.md",
            "content": "# recursive-readdir\n\n[![Build Status](https://travis-ci.org/jergason/recursive-readdir.svg?branch=master)](https://travis-ci.org/jergason/recursive-readdir)\n\nRecursively list all files in a directory and its subdirectories. It does not list the directories themselves.\n\nBecause it uses fs.readdir, which calls [readdir](http://linux.die.net/man/3/readdir) under the hood\non OS X and Linux, the order of files inside directories is [not guaranteed](http://stackoverflow.com/questions/8977441/does-readdir-guarantee-an-order).\n\n## Installation\n\n    npm install recursive-readdir\n\n## Usage\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\nrecursive(\"some/path\", function (err, files) {\n  // `files` is an array of file paths\n  console.log(files);\n});\n```\n\nIt can also take a list of files to ignore.\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\n// ignore files named \"foo.cs\" or files that end in \".html\".\nrecursive(\"some/path\", [\"foo.cs\", \"*.html\"], function (err, files) {\n  console.log(files);\n});\n```\n\nYou can also pass functions which are called to determine whether or not to\nignore a file:\n\n```javascript\nvar recursive = require(\"recursive-readdir\");\n\nfunction ignoreFunc(file, stats) {\n  // `file` is the path to the file, and `stats` is an `fs.Stats`\n  // object returned from `fs.lstat()`.\n  return stats.isDirectory() && path.basename(file) == \"test\";\n}\n\n// Ignore files named \"foo.cs\" and descendants of directories named test\nrecursive(\"some/path\", [\"foo.cs\", ignoreFunc], function (err, files) {\n  console.log(files);\n});\n```\n\n## Promises\nYou can omit the callback and return a promise instead.\n\n```javascript\nreaddir(\"some/path\").then(\n  function(files) {\n    console.log(\"files are\", files);\n  },\n  function(error) {\n    console.error(\"something exploded\", error);\n  }\n);\n```\n\nThe ignore strings support Glob syntax via\n[minimatch](https://github.com/isaacs/minimatch)."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/recursive-readdir-sync/README.md",
            "content": "recursive-readdir-sync\n======================\nNodeJS library to recursively read a directory path's contents synchronously\n\nA simple Node module for synchronously listing all files in a directory, or in any subdirectories.\n\nIt does not list directories themselves.\n\nThis library uses synchronous filesystem calls. That means this library uses **BLOCKING** calls. Keep that in mind\nwhen using it.\n\nInstall\n-------\n\n```\nnpm install recursive-readdir-sync\n```\n\nExample\n-------\n```javascript\nvar recursiveReadSync = require('recursive-readdir-sync')\n  , files\n  ;\n\ntry {\n  files = recursiveReadSync('/your/path/here');\n} catch(err){\n  if(err.errno === 34){\n    console.log('Path does not exist');\n  } else {\n    //something unrelated went wrong, rethrow\n    throw err;\n  }\n}\n\nconsole.log('Files array:', files);\n\n//loop over resulting files\nfor(var i = 0, len = files.length; i < len; i++){\n  console.log('Found: %s', files[i]);\n}\n```"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/rw/README.md",
            "content": "# rw - Now stdin and stdout are files.\n\nHow do you read a file from stdin? If you thought,\n\n```js\nvar contents = fs.readFileSync(\"/dev/stdin\", \"utf8\");\n```\n\nyouâ€™d be wrong, because Node only reads up to the size of the file reported by fs.stat rather than reading until it receives an EOF. So, if you redirect a file to your program (`cat file | program`), youâ€™ll only read the first 65,536 bytes of your file. Oops.\n\nWhat about writing a file to stdout? If you thought,\n\n```js\nfs.writeFileSync(\"/dev/stdout\", contents, \"utf8\");\n```\n\nyouâ€™d also be wrong, because this tries to close stdout, so you get this error:\n\n```\nError: UNKNOWN, unknown error\n    at Object.fs.writeSync (fs.js:528:18)\n    at Object.fs.writeFileSync (fs.js:975:21)\n```\n\n(Also, this doesnâ€™t work on Windows, because Windows doesnâ€™t support /dev/stdout, /dev/stdin and /dev/stderr!)\n\nShucks. So what should you do?\n\nYou could use a different pattern for reading from stdin:\n\n```js\nvar chunks = [];\n\nprocess.stdin\n    .on(\"data\", function(chunk) { chunks.push(chunk); })\n    .on(\"end\", function() { console.log(chunks.join(\"\").length); })\n    .setEncoding(\"utf8\");\n```\n\nBut thatâ€™s a pain, since now your code has two different code paths for reading inputs depending on whether youâ€™re reading a real file or stdin. And the code gets even more complex if you want to [read that file synchronously](https://github.com/mbostock/rw/blob/master/lib/rw/read-file-sync.js).\n\nYou could also try a different pattern for writing to stdout:\n\n```js\nprocess.stdout.write(contents);\n```\n\nOr even:\n\n```js\nconsole.log(contents);\n```\n\nBut if you try to pipe your output to `head`, youâ€™ll get this error:\n\n```\nError: write EPIPE\n    at errnoException (net.js:904:11)\n    at Object.afterWrite (net.js:720:19)\n```\n\nHuh.\n\nThe **rw** module fixes these problems. It provides an interface just like readFile, readFileSync, writeFile and writeFileSync, but with implementations that work the way you expect on stdin and stdout. If you use these methods on files other than /dev/stdin or /dev/stdout, they simply delegate to the fs methods, so you can trust that they behave identically to the methods youâ€™re used to.\n\nFor example, now you can read stdin synchronously like so:\n\n```js\nvar contents = rw.readFileSync(\"/dev/stdin\", \"utf8\");\n```\n\nOr to write to stdout:\n\n```js\nrw.writeFileSync(\"/dev/stdout\", contents, \"utf8\");\n```\n\nAnd rw automatically squashes EPIPE errors, so you can pipe the output of your program to `head` and you wonâ€™t get a spurious stack trace.\n\nTo install, `npm install rw`.\n\n### Note\n\nIf you want to read synchronously from stdin using [readFileSync](#readFileSync), you cannot also use process.stdin in the same program. Likewise, if you want to write synchronously to stdout or stderr using [writeFileSync](#writeFileSync), you cannot use process.stdout or process.stderr, respectively. (This includes using console.log and the like!) Failure to heed this warning may result in error: EAGAIN, resource temporarily unavailable. Unfortunately, it does not appear possible for this library to fix this issue automatically, so please use caution.\n\nOnly the asynchronous methods [readFile](#readFile) and [writeFile](#writeFile) are supported on Windows. Node has no synchronous API for reading from process.[stdin](https://nodejs.org/api/process.html#process_process_stdin) or writing to process.[stdout](https://nodejs.org/api/process.html#process_process_stdout) or process.[stderr](https://nodejs.org/api/process.html#process_process_stderr), so youâ€™re out of luck!\n\n## API Reference\n\n<a name=\"readFile\" href=\"#readFile\">#</a> rw.<b>readFile</b>(<i>path</i>[, <i>options</i>], <i>callback</i>)\n\nReads the file at the specified *path* completely into memory, invoking the specified *callback* once the data is available and the file is closed. The *callback* is invoked with two arguments: the *error* that occurred during read (hopefully null), and the read data. If *options* is a string, it specifies the encoding to use, in which case the read data will be a string; otherwise *options* is an object, and may specify encoding and flag properties. This method is a drop-in replacement for [fs.readFile](https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback) and fixes the behavior of special files such as /dev/stdin.\n\n<a name=\"readFileSync\" href=\"#readFileSync\">#</a> rw.<b>readFileSync</b>(<i>path</i>[, <i>options</i>])\n\nReads the file at the specified *path* completely into memory, synchronously, returning the data. If an error occurred during read, this function throws an error instead. If *options* is a string, it specifies the encoding to use, in which case the read data will be a string; otherwise *options* is an object, and may specify encoding and flag properties. This method is a drop-in replacement for [fs.readFileSync](https://nodejs.org/api/fs.html#fs_fs_readfilesync_file_options) and fixes the behavior of special files such as /dev/stdin.\n\n<a name=\"writeFile\" href=\"#writeFile\">#</a> rw.<b>writeFile</b>(<i>path</i>, <i>data</i>[, <i>options</i>], <i>callback</i>)\n\nWrites the specified *data* (completely in memory) to a file at the specified *path*, invoking the specified *callback* once the data is completely written and the file is closed. The *callback* is invoked with a single argument: the *error* that occurred during write (hopefully null). If *options* is a string, it specifies the encoding to use, in which case the *data* must be a string; otherwise *options* is an object, and may specify encoding, mode and flag properties. This method is a drop-in replacement for [fs.writeFile](https://nodejs.org/api/fs.html#fs_fs_writefile_file_data_options_callback) and fixes the behavior of special files such as /dev/stdout.\n\n<a name=\"writeFileSync\" href=\"#writeFileSync\">#</a> rw.<b>writeFileSync</b>(<i>path</i>, <i>data</i>[, <i>options</i>])\n\nWrites the specified *data* (completely in memory) to a file at the specified *path*, synchronously, returning once the data is completely written and the file is closed. Throws an *error* if one occurs during write. If *options* is a string, it specifies the encoding to use, in which case the *data* must be a string; otherwise *options* is an object, and may specify encoding, mode and flag properties. This method is a drop-in replacement for [fs.writeFileSync](https://nodejs.org/api/fs.html#fs_fs_writefilesync_file_data_options) and fixes the behavior of special files such as /dev/stdout.\n\n<a name=\"dash_readFile\" href=\"#dash_readFile\">#</a> rw.dash.<b>readFile</b>(<i>path</i>[, <i>options</i>], <i>callback</i>)\n\nEquivalent to [rw.readFile](#readFile), except treats a *path* of `-` as `/dev/stdin`. Useful for command-line arguments.\n\n<a name=\"dash_readFileSync\" href=\"#dash_readFileSync\">#</a> rw.dash.<b>readFileSync</b>(<i>path</i>[, <i>options</i>])\n\nEquivalent to [rw.readFileSync](#readFileSync), except treats a *path* of `-` as `/dev/stdin`. Useful for command-line arguments.\n\n<a name=\"dash_writeFile\" href=\"#dash_writeFile\">#</a> rw.dash.<b>writeFile</b>(<i>path</i>, <i>data</i>[, <i>options</i>], <i>callback</i>)\n\nEquivalent to [rw.writeFile](#writeFile), except treats a *path* of `-` as `/dev/stdout`. Useful for command-line arguments.\n\n<a name=\"dash_writeFileSync\" href=\"#dash_writeFileSync\">#</a> rw.dash.<b>writeFileSync</b>(<i>path</i>, <i>data</i>[, <i>options</i>])\n\nEquivalent to [rw.writeFileSync](#writeFileSync), except treats a *path* of `-` as `/dev/stdout`. Useful for command-line arguments."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/section-matter/README.md",
            "content": "# section-matter [![NPM version](https://img.shields.io/npm/v/section-matter.svg?style=flat)](https://www.npmjs.com/package/section-matter) [![NPM monthly downloads](https://img.shields.io/npm/dm/section-matter.svg?style=flat)](https://npmjs.org/package/section-matter) [![NPM total downloads](https://img.shields.io/npm/dt/section-matter.svg?style=flat)](https://npmjs.org/package/section-matter) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/section-matter.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/section-matter) \n\n> Like front-matter, but supports multiple sections in a document.\n\nPlease consider following this project's author, [Jon Schlinkert](https://github.com/jonschlinkert), and consider starring the project to show your :heart: and support.\n\n## Install\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save section-matter\n```\n\n## Usage\n\n**Params**\n\n* `input` **{String|Buffer|Object}**: If input is an object, it's `content` property must be a string or buffer.    \n* **{Object}**: options    \n* `returns` **{Object}**: Returns an object with a `content` string and an array of `sections` objects.  \n\n**Example**\n\n```js\nvar sections = require('{%= name %}');\nvar result = sections(input, options);\n// { content: 'Content before sections', sections: [] }\n```\n\nSee available [options](#options).\n\n## Example\n\n_With the exception of front-matter, **which must be the very first thing in the string**, the opening delimiter of all other sections must be followed by a string to be used as the `key` for the section._\n\nGiven the following string:\n\n```\nContent before the sections.\n\n---\n\nMore content.\n\n---one\ntitle: One\n---\n\nThis is the first section.\n```\n\nThe following code:\n\n```js\nconsole.log(sections(input));\n```\n\nResults in:\n\n```js\n{ \n  content: 'Content before the sections.\\n\\n---\\n\\nMore content.\\n',\n  sections: [\n    { \n      key: 'one',\n      data: 'title: One',\n      content: '\\nThis is the first section.' \n    } \n  ] \n}\n```\n\n## Options\n\n### options.section_parse\n\n**Type**: `function`\n\n**Default**: `undefined`\n\nFunction to be called on each section after it's parsed from the string.\n\n**Example**\n\nGiven the following string (`foo.md`):\n\n```\nThis is content before the sections.\n\n---one\ntitle: First section\n---\n\nThis is section one.\n\n---two\ntitle: Second section\n---\n\nThis is section two.\n```\n\nUsing the following custom `section_parse` function:\n\n```js\nvar fs = require('fs');\nvar path = require('path');\nvar yaml = require('js-yaml');\nvar sections = require('section-matter');\n\nvar str = fs.readFileSync('foo.md');\nvar options = {\n  section_parse: function(section) {\n    console.log(section)\n    section.key = 'section-' + section.key;\n    section.data = yaml.safeLoad(section.data);\n  }\n};\n\nvar result = sections(str, options);\nconsole.log(result);\n```\n\nResults in:\n\n```js\n{\n  content: 'This is content before the sections.\\n',\n  sections: [\n    {\n      key: 'section-one',\n      data: { title: 'First section' },\n      content: '\\nThis is section one.\\n'\n    },\n    {\n      key: 'section-two',\n      data: { title: 'Second section' },\n      content: '\\nThis is section two.\\n'\n    }\n  ]\n}\n```\n\n### options.section_delimiter\n\n**Type**: `string`\n\n**Default**: `---`\n\nDelimiter to use as the separator for sections. _With the exception of front-matter, which must be the very first thing in the string, the opening delimiter of all other sections must be followed by a string to be used as the `key` for the section._\n\n**Example**\n\n```js\nvar input = '~~~\\ntitle: bar\\n~~~\\n\\nfoo\\n~~~one\\ntitle: One\\n~~~\\nThis is one';\nconsole.log(sections(input, {section_delimiter: '~~~'}));\n```\n\nResults in:\n\n```js\n{\n  content: '',\n  sections: [\n    {\n      key: '',\n      data: 'title: bar',\n      content: '\\nfoo'\n    },\n    {\n      key: 'one',\n      data: 'title: One',\n      content: 'This is one'\n    }\n  ]\n}\n```\n\n## About\n<details>\n  <summary><strong>Contributing</strong></summary>\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\nPlease read the [contributing guide](.github/contributing.md) for advice on opening issues, pull requests, and coding standards.\n\n</details>\n\n<details>\n  <summary><strong>Running Tests</strong></summary>\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n</details>\n\n<details>\n  <summary><strong>Building docs</strong></summary>\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n</details>\n\n### Related projects\n\nYou might also be interested in these projects: \n\n- [assemble](https://www.npmjs.com/package/assemble): Get the rocks out of your socks! Assemble makes you fast at creating web projectsâ€¦ [more](https://github.com/assemble/assemble) | [homepage](https://github.com/assemble/assemble \"Get the rocks out of your socks! Assemble makes you fast at creating web projects. Assemble is used by thousands of projects for rapid prototyping, creating themes, scaffolds, boilerplates, e-books, UI components, API documentation, blogs, building websit\")\n- [gray-matter](https://www.npmjs.com/package/gray-matter): Parse front-matter from a string or file. Fast, reliable and easy to use. Parses YAMLâ€¦ [more](https://github.com/jonschlinkert/gray-matter) | [homepage](https://github.com/jonschlinkert/gray-matter \"Parse front-matter from a string or file. Fast, reliable and easy to use. Parses YAML front matter by default, but also has support for YAML, JSON, TOML or Coffee Front-Matter, with options to set custom delimiters. Used by metalsmith, assemble, verb and \")\n- [verb](https://www.npmjs.com/package/verb): Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is usedâ€¦ [more](https://github.com/verbose/verb) | [homepage](https://github.com/verbose/verb \"Documentation generator for GitHub projects. Verb is extremely powerful, easy to use, and is used on hundreds of projects of all sizes to generate everything from API docs to readmes.\")  \n\n### Contributors\n\n### Author\n**Jon Schlinkert**\n\n+ [github/jonschlinkert](https://github.com/jonschlinkert)\n+ [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\nCopyright Â© 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.6.0, on October 23, 2017._"
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/sprintf-js/README.md",
            "content": "# sprintf.js\n**sprintf.js** is a complete open source JavaScript sprintf implementation for the *browser* and *node.js*.\n\nIts prototype is simple:\n\n    string sprintf(string format , [mixed arg1 [, mixed arg2 [ ,...]]])\n\nThe placeholders in the format string are marked by `%` and are followed by one or more of these elements, in this order:\n\n* An optional number followed by a `$` sign that selects which argument index to use for the value. If not specified, arguments will be placed in the same order as the placeholders in the input string.\n* An optional `+` sign that forces to preceed the result with a plus or minus sign on numeric values. By default, only the `-` sign is used on negative numbers.\n* An optional padding specifier that says what character to use for padding (if specified). Possible values are `0` or any other character precedeed by a `'` (single quote). The default is to pad with *spaces*.\n* An optional `-` sign, that causes sprintf to left-align the result of this placeholder. The default is to right-align the result.\n* An optional number, that says how many characters the result should have. If the value to be returned is shorter than this number, the result will be padded. When used with the `j` (JSON) type specifier, the padding length specifies the tab size used for indentation.\n* An optional precision modifier, consisting of a `.` (dot) followed by a number, that says how many digits should be displayed for floating point numbers. When used with the `g` type specifier, it specifies the number of significant digits. When used on a string, it causes the result to be truncated.\n* A type specifier that can be any of:\n    * `%` â€” yields a literal `%` character\n    * `b` â€” yields an integer as a binary number\n    * `c` â€” yields an integer as the character with that ASCII value\n    * `d` or `i` â€” yields an integer as a signed decimal number\n    * `e` â€” yields a float using scientific notation\n    * `u` â€” yields an integer as an unsigned decimal number\n    * `f` â€” yields a float as is; see notes on precision above\n    * `g` â€” yields a float as is; see notes on precision above\n    * `o` â€” yields an integer as an octal number\n    * `s` â€” yields a string as is\n    * `x` â€” yields an integer as a hexadecimal number (lower-case)\n    * `X` â€” yields an integer as a hexadecimal number (upper-case)\n    * `j` â€” yields a JavaScript object or array as a JSON encoded string\n\n## JavaScript `vsprintf`\n`vsprintf` is the same as `sprintf` except that it accepts an array of arguments, rather than a variable number of arguments:\n\n    vsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"])\n\n## Argument swapping\nYou can also swap the arguments. That is, the order of the placeholders doesn't have to match the order of the arguments. You can do that by simply indicating in the format string which arguments the placeholders refer to:\n\n    sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\")\nAnd, of course, you can repeat the placeholders without having to increase the number of arguments.\n\n## Named arguments\nFormat strings may contain replacement fields rather than positional placeholders. Instead of referring to a certain argument, you can now refer to a certain key within an object. Replacement fields are surrounded by rounded parentheses - `(` and `)` - and begin with a keyword that refers to a key:\n\n    var user = {\n        name: \"Dolly\"\n    }\n    sprintf(\"Hello %(name)s\", user) // Hello Dolly\nKeywords in replacement fields can be optionally followed by any number of keywords or indexes:\n\n    var users = [\n        {name: \"Dolly\"},\n        {name: \"Molly\"},\n        {name: \"Polly\"}\n    ]\n    sprintf(\"Hello %(users[0].name)s, %(users[1].name)s and %(users[2].name)s\", {users: users}) // Hello Dolly, Molly and Polly\nNote: mixing positional and named placeholders is not (yet) supported\n\n## Computed values\nYou can pass in a function as a dynamic value and it will be invoked (with no arguments) in order to compute the value on-the-fly.\n\n    sprintf(\"Current timestamp: %d\", Date.now) // Current timestamp: 1398005382890\n    sprintf(\"Current date and time: %s\", function() { return new Date().toString() })\n\n# AngularJS\nYou can now use `sprintf` and `vsprintf` (also aliased as `fmt` and `vfmt` respectively) in your AngularJS projects. See `demo/`.\n\n# Installation\n\n## Via Bower\n\n    bower install sprintf\n\n## Or as a node.js module\n\n    npm install sprintf-js\n\n### Usage\n\n    var sprintf = require(\"sprintf-js\").sprintf,\n        vsprintf = require(\"sprintf-js\").vsprintf\n\n    sprintf(\"%2$s %3$s a %1$s\", \"cracker\", \"Polly\", \"wants\")\n    vsprintf(\"The first 4 letters of the english alphabet are: %s, %s, %s and %s\", [\"a\", \"b\", \"c\", \"d\"])\n\n# License\n\n**sprintf.js** is licensed under the terms of the 3-clause BSD license."
        },
        {
            "isEmpty": false,
            "excerpt": "",
            "filename": "/usr/murph/node_modules/strip-bom-string/README.md",
            "content": "# strip-bom-string [![NPM version](https://img.shields.io/npm/v/strip-bom-string.svg?style=flat)](https://www.npmjs.com/package/strip-bom-string) [![NPM monthly downloads](https://img.shields.io/npm/dm/strip-bom-string.svg?style=flat)](https://npmjs.org/package/strip-bom-string)  [![NPM total downloads](https://img.shields.io/npm/dt/strip-bom-string.svg?style=flat)](https://npmjs.org/package/strip-bom-string) [![Linux Build Status](https://img.shields.io/travis/jonschlinkert/strip-bom-string.svg?style=flat&label=Travis)](https://travis-ci.org/jonschlinkert/strip-bom-string)\n\n> Strip a byte order mark (BOM) from a string.\n\n## Install\n\nInstall with [npm](https://www.npmjs.com/):\n\n```sh\n$ npm install --save strip-bom-string\n```\n\n## Usage\n\n```js\nvar strip = require('strip-bom-string');\nstrip('\\ufefffoo');\n//=> 'foo'\n```\n\n## About\n\n### Related projects\n\n* [cr](https://www.npmjs.com/package/cr): Strip windows carriage returns, or convert carriage returns to newlines. | [homepage](https://github.com/jonschlinkert/cr \"Strip windows carriage returns, or convert carriage returns to newlines.\")\n* [has-bom](https://www.npmjs.com/package/has-bom): Returns true if a buffer or string has a byte order mark (BOM) | [homepage](https://github.com/jonschlinkert/has-bom \"Returns true if a buffer or string has a byte order mark (BOM)\")\n* [read-file](https://www.npmjs.com/package/read-file): Thin wrapper around fs.readFile and fs.readFileSync that also strips byte order marks when `utf8` encodingâ€¦ [more](https://github.com/jonschlinkert/read-file) | [homepage](https://github.com/jonschlinkert/read-file \"Thin wrapper around fs.readFile and fs.readFileSync that also strips byte order marks when `utf8` encoding is chosen. Also optionally replaces windows newlines with unix newlines.\")\n* [strip-bom-buffer](https://www.npmjs.com/package/strip-bom-buffer): Strip a byte order mark (BOM) from a buffer. | [homepage](https://github.com/jonschlinkert/strip-bom-buffer \"Strip a byte order mark (BOM) from a buffer.\")\n\n### Contributing\n\nPull requests and stars are always welcome. For bugs and feature requests, [please create an issue](../../issues/new).\n\n### Building docs\n\n_(This project's readme.md is generated by [verb](https://github.com/verbose/verb-generate-readme), please don't edit the readme directly. Any changes to the readme must be made in the [.verb.md](.verb.md) readme template.)_\n\nTo generate the readme, run the following command:\n\n```sh\n$ npm install -g verbose/verb#dev verb-generate-readme && verb\n```\n\n### Running tests\n\nRunning and reviewing unit tests is a great way to get familiarized with a library and its API. You can install dependencies and run tests with the following command:\n\n```sh\n$ npm install && npm test\n```\n\n### Author\n\n**Jon Schlinkert**\n\n* [github/jonschlinkert](https://github.com/jonschlinkert)\n* [twitter/jonschlinkert](https://twitter.com/jonschlinkert)\n\n### License\n\nCopyright Â© 2017, [Jon Schlinkert](https://github.com/jonschlinkert).\nReleased under the [MIT License](LICENSE).\n\n***\n\n_This file was generated by [verb-generate-readme](https://github.com/verbose/verb-generate-readme), v0.4.3, on March 29, 2017._"
        },
        {
            "excerpt": "",
            "orig": "",
            "filename": "/usr/murph/test/source/markdown/b.md",
            "content": ""
        }
    ],
    "hello": "world"
}